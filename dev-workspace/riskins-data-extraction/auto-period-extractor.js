/**
 * –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –≠–ö–°–¢–†–ê–ö–¢–û–† –° –í–´–ë–û–†–û–ú –ü–ï–†–ò–û–î–ê (6 –ò–õ–ò 12 –ú–ï–°–Ø–¶–ï–í)
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é headless —Ä–µ–∂–∏–º - –±—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
 */

const puppeteer = require('puppeteer');

class AutoPeriodExtractor {
    constructor(options = {}) {
        this.baseUrl = 'https://riskins-insurance.eua.in.ua/';
        this.options = {
            headless: true,
            timeout: 30000,
            ...options
        };
    }

    async getInsuranceOffers(vehicleNumber, periodMonths = 12) {
        let browser;
        try {
            browser = await puppeteer.launch({
                headless: this.options.headless,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');
            await page.setViewport({ width: 1366, height: 768 });

            console.log('üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º Riskins Insurance...');
            await page.goto(this.baseUrl, { waitUntil: 'networkidle2' });

            console.log(`üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä: ${vehicleNumber}`);
            await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await page.click('#autoNumberSearch');
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–¥–µ–ª–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            await page.keyboard.down('Meta');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Meta');
            await page.type('#autoNumberSearch', vehicleNumber);

            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–† –ü–ï–†–ò–û–î–ê
            console.log(`üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${periodMonths} –º–µ—Å—è—Ü–µ–≤`);
            await this.selectPeriod(page, periodMonths);

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
            await page.click('#btnCalculateNumber');

            console.log('‚è±Ô∏è –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            await page.waitForTimeout(5000);

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await page.waitForFunction(() => {
                const tables = document.querySelectorAll('table tr, .Table tr');
                return tables.length > 3; // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            }, { timeout: 15000 });

            console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...');
            const offers = await this.extractInsuranceData(page);

            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            const selectedPeriod = await page.evaluate(() => {
                const selects = document.querySelectorAll('select');
                for (const select of selects) {
                    const selectedOption = select.options[select.selectedIndex];
                    if (selectedOption && selectedOption.text.includes('–º—ñ—Å—è—Ü')) {
                        return selectedOption.text.trim();
                    }
                }
                return `${document.querySelector('select') ? '–ü–µ—Ä–∏–æ–¥ –Ω–∞–π–¥–µ–Ω' : '–ü–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'}`;
            });

            return {
                success: true,
                vehicleNumber,
                requestedPeriod: `${periodMonths} –º–µ—Å—è—Ü–µ–≤`,
                selectedPeriod,
                offers,
                totalOffers: offers.length,
                timestamp: new Date().toISOString(),
                extractedAt: 'Riskins Insurance Ukraine (Auto Period)'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
            return {
                success: false,
                error: error.message,
                timestamp: new Date().toISOString()
            };
        } finally {
            if (browser) {
                await browser.close();
            }
        }
    }

    async selectPeriod(page, months) {
        try {
            // –ò—â–µ–º select —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
            const periodSelector = await page.evaluate(() => {
                const selects = document.querySelectorAll('select');
                for (const select of selects) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–ø—Ü–∏–∏ —Å –º–µ—Å—è—Ü–∞–º–∏
                    const hasMonthOptions = Array.from(select.options).some(option => 
                        option.text.includes('–º—ñ—Å—è—Ü') || option.text.includes('month')
                    );
                    if (hasMonthOptions) {
                        return true;
                    }
                }
                return false;
            });

            if (periodSelector) {
                // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                await page.evaluate((targetMonths) => {
                    const selects = document.querySelectorAll('select');
                    for (const select of selects) {
                        const options = Array.from(select.options);
                        const hasMonthOptions = options.some(option => 
                            option.text.includes('–º—ñ—Å—è—Ü') || option.text.includes('month')
                        );
                        
                        if (hasMonthOptions) {
                            // –ò—â–µ–º –æ–ø—Ü–∏—é —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—è—Ü–µ–≤
                            const targetOption = options.find(option => {
                                const text = option.text.toLowerCase();
                                if (targetMonths === 6) {
                                    return text.includes('6') && text.includes('–º—ñ—Å—è—Ü');
                                } else if (targetMonths === 12) {
                                    return text.includes('12') || text.includes('—Ä—ñ–∫') || 
                                           (text.includes('–º—ñ—Å—è—Ü') && !text.includes('6'));
                                }
                                return false;
                            });
                            
                            if (targetOption) {
                                select.value = targetOption.value;
                                select.dispatchEvent(new Event('change', { bubbles: true }));
                                console.log(`–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${targetOption.text}`);
                                return true;
                            }
                        }
                    }
                    return false;
                }, months);

                await page.waitForTimeout(1000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            } else {
                console.log('‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞:', error.message);
            console.log('üìÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
    }

    async extractInsuranceData(page) {
        return await page.evaluate(() => {
            const offers = [];

            // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            const tableRows = document.querySelectorAll('table tr, .Table tr');
            
            tableRows.forEach((row, index) => {
                const rowText = row.textContent;
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if (!rowText || rowText.includes('–¶—ñ–Ω–∞') || rowText.includes('–ö–æ–º–ø–∞–Ω—ñ—è')) {
                    return;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                const priceCell = row.querySelector('.Table__cell_price, td[class*="price"], .price');
                const discountCell = row.querySelector('.Table__discount, .discount');
                
                if (priceCell || rowText.includes('–≥—Ä–Ω')) {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                    let currentPrice = 0;
                    let oldPrice = null;
                    
                    const priceText = priceCell ? priceCell.textContent : rowText;
                    const priceMatch = priceText.match(/(\d{3,5})\s*–≥—Ä–Ω/g);
                    
                    if (priceMatch) {
                        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã
                        const prices = priceMatch.map(p => parseInt(p.replace(/\D/g, '')));
                        currentPrice = Math.min(...prices); // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è
                        if (prices.length > 1) {
                            oldPrice = Math.max(...prices); // –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è
                        }
                    }

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∫–∏–¥–∫—É
                    let discount = null;
                    if (discountCell) {
                        const discountMatch = discountCell.textContent.match(/(\d+)%/);
                        if (discountMatch) {
                            discount = parseInt(discountMatch[1]);
                        }
                    }

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                    let companyName = `–ö–æ–º–ø–∞–Ω–∏—è ${offers.length + 1}`;
                    const companyKeywords = {
                        'USG': /USG/i,
                        'ARX': /ARX/i,
                        '–ö–ù–Ø–ñ–ê': /(–ö–ù–Ø–ñ–ê|KNYAZHA)/i,
                        '–ï–¢–ê–õ–û–ù': /(–ï–¢–ê–õ–û–ù|ETALON)/i,
                        '–ö–†–ï–î–û': /(–ö–†–ï–î–û|KREDO)/i,
                        '–û–†–ê–ù–¢–ê': /(–û–†–ê–ù–¢–ê|ORANTA)/i,
                        '–£–ü–°–ö': /–£–ü–°–ö/i,
                        'PZU': /PZU/i,
                        '–£–ù–Ü–ö–ê': /(–£–ù–Ü–ö–ê|UNIKA)/i,
                        '–Ü–ù–ì–û': /(–Ü–ù–ì–û|INGO)/i,
                        '–ü–†–û–í–Ü–î–ù–ê': /(–ü–†–û–í–Ü–î–ù–ê|PROVIDNA)/i,
                        '–ê–õ–¨–§–ê': /(–ê–õ–¨–§–ê|ALFA)/i
                    };

                    for (const [company, pattern] of Object.entries(companyKeywords)) {
                        if (pattern.test(rowText)) {
                            companyName = company;
                            break;
                        }
                    }

                    // –§–∏–ª—å—Ç—Ä —Ä–∞–∑—É–º–Ω—ã—Ö —Ü–µ–Ω
                    if (currentPrice >= 1000 && currentPrice <= 20000) {
                        offers.push({
                            id: `auto_period_${Date.now()}_${index}`,
                            companyName,
                            price: currentPrice,
                            oldPrice,
                            discount,
                            currency: '–≥—Ä–Ω',
                            rating: 5,
                            status: '–î–æ—Å—Ç—É–ø–Ω–æ',
                            features: [],
                            source: 'Riskins Insurance',
                            rawData: rowText.substring(0, 200)
                        });
                    }
                }
            });

            return offers;
        });
    }
}

module.exports = AutoPeriodExtractor;
