/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô –≠–ö–°–¢–†–ê–ö–¢–û–† –° –ü–û–õ–ù–´–ú–ò –ò –°–ö–ò–î–û–ß–ù–´–ú–ò –¶–ï–ù–ê–ú–ò
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É, –∏ —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */

const puppeteer = require('puppeteer');

class EnhancedPriceExtractor {
    
    static async extractSinglePeriodWithDiscounts(plateNumber, months, headless = true) {
        console.log(`\nüí∞ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï ${months} –ú–ï–°–Ø–¶–ï–í (–ü–û–õ–ù–´–ï + –°–ö–ò–î–û–ß–ù–´–ï –¶–ï–ù–´)`);
        console.log('=' .repeat(55));

        let browser;
        try {
            browser = await puppeteer.launch({
                headless: headless,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            const page = await browser.newPage();
            await page.setViewport({ width: 1366, height: 768 });

            console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
            await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
            await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await page.click('#autoNumberSearch');
            await page.keyboard.down('Meta');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Meta');
            await page.type('#autoNumberSearch', plateNumber);

            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ 12 –º–µ—Å—è—Ü–µ–≤
            if (months !== 12) {
                console.log(`üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤...`);
                await page.waitForSelector('#coverageTime', { timeout: 10000 });
                await page.click('#coverageTime');
                await page.waitForTimeout(500);
                
                const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
                const labels = await page.$$('#coverageTime .Select__option');
                
                let found = false;
                for (const label of labels) {
                    const text = await label.evaluate(el => el.textContent.trim());
                    if (text === targetText) {
                        await label.click();
                        await page.waitForTimeout(1000);
                        console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${targetText}`);
                        found = true;
                        break;
                    }
                }
                
                if (!found) {
                    throw new Error(`–ü–µ—Ä–∏–æ–¥ "${targetText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
            } else {
                console.log('üïí –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (12 –º–µ—Å—è—Ü–µ–≤)');
            }

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
            await page.click('#btnCalculateNumber');

            console.log('‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
            await page.waitForSelector('.Table__cell', { timeout: 45000 });
            await page.waitForTimeout(5000);

            console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ –∏ —Å–∫–∏–¥–æ—á–Ω—ã–µ —Ü–µ–Ω—ã...');
            const offers = await page.evaluate(() => {
                const results = [];
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                const rows = document.querySelectorAll('.Table__row');
                
                rows.forEach((row, rowIndex) => {
                    const priceCell = row.querySelector('.Table__cell_price');
                    if (!priceCell) return;
                    
                    const fullText = priceCell.textContent.trim();
                    let originalPrice = null;
                    let discountedPrice = null;
                    let discountPercent = null;
                    
                    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π
                    const discountElement = priceCell.querySelector('.Table__discount');
                    
                    if (discountElement) {
                        // –ï—Å—Ç—å —Å–∫–∏–¥–∫–∞
                        const discountText = discountElement.textContent.trim();
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
                        const percentMatch = discountText.match(/(\d+)%/);
                        if (percentMatch) {
                            discountPercent = parseInt(percentMatch[1]);
                        }
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∏
                        const originalPriceMatch = discountText.match(/(\d{4,5})\s*–≥—Ä–Ω/);
                        if (originalPriceMatch) {
                            originalPrice = parseInt(originalPriceMatch[1]);
                        }
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        // –ò—â–µ–º —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–∞—è –∏–¥–µ—Ç –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏
                        const allPrices = fullText.match(/(\d{4,5})\s*–≥—Ä–Ω/g);
                        if (allPrices && allPrices.length >= 2) {
                            const discountedMatch = allPrices[1].match(/(\d{4,5})/);
                            if (discountedMatch) {
                                discountedPrice = parseInt(discountedMatch[1]);
                            }
                        }
                    } else {
                        // –ù–µ—Ç —Å–∫–∏–¥–∫–∏, —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ü–µ–Ω–∞
                        const priceMatch = fullText.match(/(\d{4,5})\s*–≥—Ä–Ω/);
                        if (priceMatch) {
                            originalPrice = parseInt(priceMatch[1]);
                            discountedPrice = originalPrice; // –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
                            discountPercent = 0;
                        }
                    }
                    
                    if (originalPrice) {
                        const savings = originalPrice - discountedPrice;
                        
                        results.push({
                            index: results.length + 1,
                            company: `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${results.length + 1}`,
                            originalPrice: originalPrice,
                            discountedPrice: discountedPrice,
                            discountPercent: discountPercent,
                            savings: savings,
                            originalPriceFormatted: `${originalPrice}‚Ç¥`,
                            discountedPriceFormatted: `${discountedPrice}‚Ç¥`,
                            savingsFormatted: savings > 0 ? `${savings}‚Ç¥` : '0‚Ç¥'
                        });
                    }
                });

                return results;
            });

            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const originalPrices = offers.map(o => o.originalPrice);
            const discountedPrices = offers.map(o => o.discountedPrice);
            
            const avgOriginal = originalPrices.length > 0 ? Math.round(originalPrices.reduce((a, b) => a + b) / originalPrices.length) : 0;
            const avgDiscounted = discountedPrices.length > 0 ? Math.round(discountedPrices.reduce((a, b) => a + b) / discountedPrices.length) : 0;
            const totalSavings = avgOriginal - avgDiscounted;

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:`);
            offers.forEach(offer => {
                if (offer.discountPercent > 0) {
                    console.log(`   ${offer.index}. ${offer.originalPriceFormatted} ‚Üí ${offer.discountedPriceFormatted} (—Å–∫–∏–¥–∫–∞ ${offer.discountPercent}%, —ç–∫–æ–Ω–æ–º–∏—è ${offer.savingsFormatted})`);
                } else {
                    console.log(`   ${offer.index}. ${offer.originalPriceFormatted} (–±–µ–∑ —Å–∫–∏–¥–∫–∏)`);
                }
            });
            
            console.log(`üìä –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã: ${avgOriginal}‚Ç¥ ‚Üí ${avgDiscounted}‚Ç¥ (—ç–∫–æ–Ω–æ–º–∏—è ${totalSavings}‚Ç¥)`);

            return {
                success: true,
                plateNumber: plateNumber,
                period: months,
                offers: offers,
                statistics: {
                    avgOriginalPrice: avgOriginal,
                    avgDiscountedPrice: avgDiscounted,
                    avgSavings: totalSavings,
                    offersCount: offers.length
                },
                extractedAt: new Date().toISOString()
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ ${months} –º–µ—Å—è—Ü–µ–≤: ${error.message}`);
            return {
                success: false,
                error: error.message,
                period: months
            };
        } finally {
            if (browser) {
                await browser.close();
            }
        }
    }

    static async comparePeriodsWithDiscounts(plateNumber, headless = true) {
        console.log(`\nü§ñ –ü–û–õ–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –° –£–ß–ï–¢–û–ú –°–ö–ò–î–û–ö`);
        console.log(`üöó –ù–æ–º–µ—Ä: ${plateNumber}`);
        console.log('=' .repeat(60));

        // –ò–∑–≤–ª–µ–∫–∞–µ–º 6 –º–µ—Å—è—Ü–µ–≤
        const result6 = await this.extractSinglePeriodWithDiscounts(plateNumber, 6, headless);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º 12 –º–µ—Å—è—Ü–µ–≤
        const result12 = await this.extractSinglePeriodWithDiscounts(plateNumber, 12, headless);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:');
        console.log('=' .repeat(50));

        const analysis = {
            plateNumber: plateNumber,
            period6: result6,
            period12: result12,
            comparison: null,
            timestamp: new Date().toISOString()
        };

        if (result6.success && result12.success) {
            const stats6 = result6.statistics;
            const stats12 = result12.statistics;

            console.log(`‚úÖ –û–±–∞ –ø–µ—Ä–∏–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã`);
            console.log(`\nüí∞ –ü–û–õ–ù–´–ï –¶–ï–ù–´ (–±–µ–∑ —Å–∫–∏–¥–∫–∏):`);
            console.log(`   6 –º–µ—Å—è—Ü–µ–≤:  ${stats6.avgOriginalPrice}‚Ç¥ (${stats6.offersCount} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)`);
            console.log(`   12 –º–µ—Å—è—Ü–µ–≤: ${stats12.avgOriginalPrice}‚Ç¥ (${stats12.offersCount} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)`);
            
            console.log(`\nüí∏ –¶–ï–ù–´ –°–û –°–ö–ò–î–ö–û–ô:`);
            console.log(`   6 –º–µ—Å—è—Ü–µ–≤:  ${stats6.avgDiscountedPrice}‚Ç¥ (—ç–∫–æ–Ω–æ–º–∏—è ${stats6.avgSavings}‚Ç¥)`);
            console.log(`   12 –º–µ—Å—è—Ü–µ–≤: ${stats12.avgDiscountedPrice}‚Ç¥ (—ç–∫–æ–Ω–æ–º–∏—è ${stats12.avgSavings}‚Ç¥)`);

            const originalDiff = stats12.avgOriginalPrice - stats6.avgOriginalPrice;
            const discountedDiff = stats12.avgDiscountedPrice - stats6.avgDiscountedPrice;
            const originalPercent = stats6.avgOriginalPrice > 0 ? Math.round((originalDiff / stats6.avgOriginalPrice) * 100) : 0;
            const discountedPercent = stats6.avgDiscountedPrice > 0 ? Math.round((discountedDiff / stats6.avgDiscountedPrice) * 100) : 0;

            console.log(`\nüìà –†–ê–ó–ù–ò–¶–ê:`);
            console.log(`   –ü–æ–ª–Ω—ã–µ —Ü–µ–Ω—ã: ${originalDiff}‚Ç¥ (${originalPercent > 0 ? '+' : ''}${originalPercent}%)`);
            console.log(`   –°–æ —Å–∫–∏–¥–∫–æ–π:  ${discountedDiff}‚Ç¥ (${discountedPercent > 0 ? '+' : ''}${discountedPercent}%)`);

            let recommendation;
            if (Math.abs(discountedPercent) < 5) {
                recommendation = '–¶–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –≤—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
            } else if (discountedPercent > 0) {
                recommendation = `12-–º–µ—Å—è—á–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ—Ä–æ–∂–µ –Ω–∞ ${discountedPercent}%. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ 6-–º–µ—Å—è—á–Ω—É—é.`;
            } else {
                recommendation = `6-–º–µ—Å—è—á–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ—Ä–æ–∂–µ –Ω–∞ ${Math.abs(discountedPercent)}%. –õ—É—á—à–µ –≤–∑—è—Ç—å 12-–º–µ—Å—è—á–Ω—É—é.`;
            }

            console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${recommendation}`);

            analysis.comparison = {
                avgOriginalPrice6: stats6.avgOriginalPrice,
                avgOriginalPrice12: stats12.avgOriginalPrice,
                avgDiscountedPrice6: stats6.avgDiscountedPrice,
                avgDiscountedPrice12: stats12.avgDiscountedPrice,
                originalDifference: originalDiff,
                discountedDifference: discountedDiff,
                originalPercent: originalPercent,
                discountedPercent: discountedPercent,
                recommendation: recommendation
            };

        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –æ–±–æ–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö');
            if (!result6.success) console.log(`   6 –º–µ—Å—è—Ü–µ–≤: ${result6.error}`);
            if (!result12.success) console.log(`   12 –º–µ—Å—è—Ü–µ–≤: ${result12.error}`);
        }

        return analysis;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
if (require.main === module) {
    const args = process.argv.slice(2);
    const plateNumber = args[0] || 'AA1111AA';
    
    console.log('üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –° –£–ß–ï–¢–û–ú –°–ö–ò–î–û–ö');
    console.log('–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π');
    
    EnhancedPriceExtractor.comparePeriodsWithDiscounts(plateNumber, true)
        .then(result => {
            console.log('\nüéâ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            const fs = require('fs');
            const filename = `enhanced_comparison_${plateNumber.replace(/[^A-Z0-9]/g, '')}_${new Date().toISOString().split('T')[0]}.json`;
            fs.writeFileSync(filename, JSON.stringify(result, null, 2));
            console.log(`üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
            
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { EnhancedPriceExtractor };
