/**
 * –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –°–ï–õ–ï–ö–¢–û–†–û–í –ü–ï–†–ò–û–î–ê
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
 */

const puppeteer = require('puppeteer');

async function autoInvestigatePeriod() {
    console.log('üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –°–ï–õ–ï–ö–¢–û–†–û–í –ü–ï–†–ò–û–î–ê');
    console.log('=' .repeat(60));
    console.log('ü§ñ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º\n');
    
    let browser;
    try {
        browser = await puppeteer.launch({
            headless: true, // –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();
        await page.setViewport({ width: 1366, height: 768 });

        console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.keyboard.down('Meta');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Meta');
        await page.type('#autoNumberSearch', 'AA1111AA');

        console.log('üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        // –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const analysis = await page.evaluate(() => {
            const results = {
                selects: [],
                radioButtons: [],
                clickableElements: [],
                periodRelated: [],
                allFormElements: []
            };

            // 1. –í—Å–µ SELECT —ç–ª–µ–º–µ–Ω—Ç—ã
            const selects = document.querySelectorAll('select');
            selects.forEach((select, index) => {
                const options = Array.from(select.options).map(opt => ({
                    value: opt.value,
                    text: opt.text.trim(),
                    selected: opt.selected
                }));
                
                results.selects.push({
                    index,
                    selector: `select:nth-of-type(${index + 1})`,
                    id: select.id,
                    name: select.name,
                    className: select.className,
                    optionsCount: options.length,
                    options: options,
                    hasMonthOptions: options.some(opt => 
                        opt.text.includes('–º—ñ—Å—è—Ü') || 
                        opt.text.includes('month') ||
                        opt.text.includes('6') || 
                        opt.text.includes('12') ||
                        opt.text.includes('—Ä—ñ–∫')
                    )
                });
            });

            // 2. –í—Å–µ RADIO BUTTON —ç–ª–µ–º–µ–Ω—Ç—ã
            const radios = document.querySelectorAll('input[type="radio"]');
            radios.forEach((radio, index) => {
                const label = document.querySelector(`label[for="${radio.id}"]`);
                const labelText = label ? label.textContent.trim() : '';
                
                results.radioButtons.push({
                    index,
                    selector: `input[type="radio"]:nth-of-type(${index + 1})`,
                    id: radio.id,
                    name: radio.name,
                    value: radio.value,
                    checked: radio.checked,
                    labelText: labelText,
                    hasPeriodText: labelText.includes('–º—ñ—Å—è—Ü') || labelText.includes('6') || labelText.includes('12')
                });
            });

            // 3. –≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–∏–æ–¥–∞
            const allElements = document.querySelectorAll('*');
            allElements.forEach((el, index) => {
                const text = el.textContent?.trim() || '';
                const lowerText = text.toLowerCase();
                
                if ((lowerText.includes('–ø–µ—Ä—ñ–æ–¥') || 
                     lowerText.includes('6 –º—ñ—Å—è—Ü') || 
                     lowerText.includes('12 –º—ñ—Å—è—Ü') ||
                     lowerText.includes('–≤–∏–±–µ—Ä—ñ—Ç—å')) && 
                    text.length < 200) {
                    
                    results.periodRelated.push({
                        index,
                        tag: el.tagName,
                        id: el.id,
                        className: el.className,
                        text: text,
                        isClickable: el.onclick !== null || 
                                    el.style.cursor === 'pointer' ||
                                    el.getAttribute('role') === 'button',
                        selector: el.id ? `#${el.id}` : 
                                 el.className ? `.${el.className.split(' ')[0]}` :
                                 el.tagName.toLowerCase()
                    });
                }
            });

            // 4. –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "6" –∏–ª–∏ "12"
            allElements.forEach((el, index) => {
                const text = el.textContent?.trim() || '';
                if ((text === '6' || text === '12' || 
                     text.includes('6 –º—ñ—Å—è—Ü') || 
                     text.includes('12 –º—ñ—Å—è—Ü')) &&
                    (el.onclick !== null || 
                     el.style.cursor === 'pointer' ||
                     el.getAttribute('role') === 'button' ||
                     el.tagName === 'BUTTON' ||
                     el.tagName === 'A' ||
                     el.className.includes('btn') ||
                     el.className.includes('click'))) {
                    
                    results.clickableElements.push({
                        tag: el.tagName,
                        id: el.id,
                        className: el.className,
                        text: text,
                        selector: el.id ? `#${el.id}` : 
                                 el.className ? `.${el.className.split(' ')[0]}` :
                                 `${el.tagName.toLowerCase()}:contains("${text}")`,
                        parentText: el.parentElement?.textContent?.trim().substring(0, 100)
                    });
                }
            });

            // 5. –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
            const formElements = document.querySelectorAll('input, select, button, textarea');
            formElements.forEach((el, index) => {
                results.allFormElements.push({
                    index,
                    tag: el.tagName,
                    type: el.type || 'none',
                    id: el.id,
                    name: el.name,
                    className: el.className,
                    value: el.value || '',
                    text: el.textContent?.trim() || ''
                });
            });

            return results;
        });

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('=' .repeat(40));

        // –ê–Ω–∞–ª–∏–∑ SELECT —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('\nüîΩ SELECT –≠–õ–ï–ú–ï–ù–¢–´:');
        if (analysis.selects.length === 0) {
            console.log('   ‚ùå Select —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        } else {
            analysis.selects.forEach(select => {
                console.log(`\n   Select #${select.index}:`);
                console.log(`     –°–µ–ª–µ–∫—Ç–æ—Ä: ${select.selector}`);
                console.log(`     ID: "${select.id}"`);
                console.log(`     Class: "${select.className}"`);
                console.log(`     –°–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–∏–æ–¥—ã: ${select.hasMonthOptions ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
                
                if (select.hasMonthOptions) {
                    console.log('     üìÖ –û–ü–¶–ò–ò –ü–ï–†–ò–û–î–ê:');
                    select.options.forEach(opt => {
                        const marker = opt.selected ? 'üëâ' : '  ';
                        console.log(`       ${marker} "${opt.text}" (value: "${opt.value}")`);
                    });
                }
            });
        }

        // –ê–Ω–∞–ª–∏–∑ RADIO BUTTON —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('\nüîò RADIO BUTTON –≠–õ–ï–ú–ï–ù–¢–´:');
        const periodRadios = analysis.radioButtons.filter(r => r.hasPeriodText);
        if (periodRadios.length === 0) {
            console.log('   ‚ùå Radio buttons —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        } else {
            periodRadios.forEach(radio => {
                console.log(`\n   Radio #${radio.index}:`);
                console.log(`     –°–µ–ª–µ–∫—Ç–æ—Ä: ${radio.selector}`);
                console.log(`     ID: "${radio.id}"`);
                console.log(`     Name: "${radio.name}"`);
                console.log(`     Label: "${radio.labelText}"`);
                console.log(`     Checked: ${radio.checked ? '‚úÖ' : '‚ùå'}`);
            });
        }

        // –ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–µ—Ä–∏–æ–¥–∞
        console.log('\nüìù –≠–õ–ï–ú–ï–ù–¢–´ –° –¢–ï–ö–°–¢–û–ú –ü–ï–†–ò–û–î–ê:');
        analysis.periodRelated.forEach((el, i) => {
            console.log(`\n   –≠–ª–µ–º–µ–Ω—Ç #${i + 1}:`);
            console.log(`     Tag: <${el.tag}>`);
            console.log(`     ID: "${el.id}"`);
            console.log(`     Class: "${el.className}"`);
            console.log(`     –°–µ–ª–µ–∫—Ç–æ—Ä: ${el.selector}`);
            console.log(`     –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π: ${el.isClickable ? '‚úÖ' : '‚ùå'}`);
            console.log(`     –¢–µ–∫—Å—Ç: "${el.text}"`);
        });

        // –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('\nüñ±Ô∏è –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –° "6" –ò–õ–ò "12":');
        if (analysis.clickableElements.length === 0) {
            console.log('   ‚ùå –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        } else {
            analysis.clickableElements.forEach((el, i) => {
                console.log(`\n   –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π #${i + 1}:`);
                console.log(`     Tag: <${el.tag}>`);
                console.log(`     –°–µ–ª–µ–∫—Ç–æ—Ä: ${el.selector}`);
                console.log(`     –¢–µ–∫—Å—Ç: "${el.text}"`);
                console.log(`     –ö–æ–Ω—Ç–µ–∫—Å—Ç: "${el.parentText}"`);
            });
        }

        // –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –°–ï–õ–ï–ö–¢–û–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:');
        const recommendations = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º select —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
        const periodSelects = analysis.selects.filter(s => s.hasMonthOptions);
        if (periodSelects.length > 0) {
            recommendations.push({
                type: 'SELECT',
                selector: periodSelects[0].selector,
                method: '–í—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –≤ select',
                confidence: '–í—ã—Å–æ–∫–∞—è'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º radio buttons
        if (periodRadios.length > 0) {
            recommendations.push({
                type: 'RADIO',
                selector: periodRadios[0].selector,
                method: '–ö–ª–∏–∫ –ø–æ radio button',
                confidence: '–í—ã—Å–æ–∫–∞—è'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (analysis.clickableElements.length > 0) {
            recommendations.push({
                type: 'CLICKABLE',
                selector: analysis.clickableElements[0].selector,
                method: '–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É',
                confidence: '–°—Ä–µ–¥–Ω—è—è'
            });
        }

        if (recommendations.length === 0) {
            console.log('   ‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            console.log('   üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏');
        } else {
            recommendations.forEach((rec, i) => {
                console.log(`\n   –í–∞—Ä–∏–∞–Ω—Ç #${i + 1}:`);
                console.log(`     –¢–∏–ø: ${rec.type}`);
                console.log(`     –°–µ–ª–µ–∫—Ç–æ—Ä: ${rec.selector}`);
                console.log(`     –ú–µ—Ç–æ–¥: ${rec.method}`);
                console.log(`     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${rec.confidence}`);
            });
        }

        return {
            success: true,
            analysis,
            recommendations
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error.message);
        return {
            success: false,
            error: error.message
        };
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    autoInvestigatePeriod()
        .then((result) => {
            console.log('\nüéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            if (result.success && result.recommendations.length > 0) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
            } else {
                console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥');
            }
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { autoInvestigatePeriod };
