/**
 * –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–Ø–í–õ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ 6 –º–µ—Å—è—Ü–µ–≤
 */

const puppeteer = require('puppeteer');

async function monitorResultsAppearance() {
    console.log('üëÅÔ∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–Ø–í–õ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í');
    console.log('=' .repeat(50));

    let browser;
    try {
        browser = await puppeteer.launch({
            headless: false, // –í–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();
        await page.setViewport({ width: 1366, height: 768 });

        console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.keyboard.down('Meta');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Meta');
        await page.type('#autoNumberSearch', 'AA1111AA');

        console.log('üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ 6 –º–µ—Å—è—Ü–µ–≤...');
        await page.waitForSelector('#coverageTime', { timeout: 10000 });
        await page.click('#coverageTime');
        await page.waitForTimeout(500);
        
        const labels = await page.$$('#coverageTime .Select__option');
        for (const label of labels) {
            const text = await label.evaluate(el => el.textContent.trim());
            if (text === '6 –º—ñ—Å—è—Ü—ñ–≤') {
                await label.click();
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: 6 –º–µ—Å—è—Ü–µ–≤');
                break;
            }
        }
        await page.waitForTimeout(1000);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–û –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        console.log('üì∑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –î–û –Ω–∞–∂–∞—Ç–∏—è...');
        const beforeState = await page.evaluate(() => {
            return {
                bodyHTML: document.body.innerHTML.length,
                allElements: document.querySelectorAll('*').length,
                visibleElements: Array.from(document.querySelectorAll('*')).filter(el => 
                    el.offsetWidth > 0 && el.offsetHeight > 0
                ).length
            };
        });

        console.log(`   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ: ${beforeState.allElements} (–≤–∏–¥–∏–º—ã—Ö: ${beforeState.visibleElements})`);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await page.evaluate(() => {
            window.changesLog = [];
            
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach((node) => {
                            if (node.nodeType === Node.ELEMENT_NODE) {
                                const element = node;
                                const text = element.textContent?.trim() || '';
                                const hasPrice = text.match(/\d+.*‚Ç¥|‚Ç¥.*\d+|\d+\s*–≥—Ä–Ω|–≥—Ä–Ω\s*\d+/);
                                
                                if (hasPrice || element.className || element.id || text.length > 10) {
                                    window.changesLog.push({
                                        timestamp: Date.now(),
                                        type: 'added',
                                        tag: element.tagName,
                                        id: element.id,
                                        className: element.className,
                                        text: text.substring(0, 100),
                                        hasPrice: !!hasPrice,
                                        selector: element.id ? `#${element.id}` : 
                                                 element.className ? `.${element.className.split(' ')[0]}` :
                                                 element.tagName.toLowerCase()
                                    });
                                }
                            }
                        });
                    }
                });
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
            
            console.log('üéØ MutationObserver –∑–∞–ø—É—â–µ–Ω');
        });

        console.log('\nüîç –ù–ê–ñ–ò–ú–ê–ï–ú –ö–ù–û–ü–ö–£ –ò –ú–û–ù–ò–¢–û–†–ò–ú...');
        await page.click('#btnCalculateNumber');

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        const monitoringDuration = 30000; // 30 —Å–µ–∫—É–Ω–¥
        const checkInterval = 2000; // –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        let elapsed = 0;

        while (elapsed < monitoringDuration) {
            await page.waitForTimeout(checkInterval);
            elapsed += checkInterval;

            const currentState = await page.evaluate((currentElapsed) => {
                const changes = window.changesLog.slice(); // –∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥
                window.changesLog = []; // –æ—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                
                return {
                    timestamp: Date.now(),
                    elapsed: currentElapsed,
                    bodyHTML: document.body.innerHTML.length,
                    allElements: document.querySelectorAll('*').length,
                    visibleElements: Array.from(document.querySelectorAll('*')).filter(el => 
                        el.offsetWidth > 0 && el.offsetHeight > 0
                    ).length,
                    newChanges: changes,
                    currentPrices: Array.from(document.querySelectorAll('*')).filter(el => {
                        const text = el.textContent?.trim() || '';
                        return text.match(/^\d+\s*‚Ç¥$|^\d+\s*–≥—Ä–Ω$/) && text.length < 20;
                    }).map(el => ({
                        text: el.textContent.trim(),
                        tag: el.tagName,
                        className: el.className,
                        id: el.id
                    }))
                };
            }, elapsed);

            console.log(`\n‚è∞ ${elapsed/1000}s - –≠–ª–µ–º–µ–Ω—Ç–æ–≤: ${currentState.allElements} (–≤–∏–¥–∏–º—ã—Ö: ${currentState.visibleElements})`);

            if (currentState.newChanges.length > 0) {
                console.log(`   üìù –ù–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${currentState.newChanges.length}`);
                currentState.newChanges.forEach((change, i) => {
                    if (change.hasPrice || change.text.length > 20) {
                        console.log(`      ${i+1}. ${change.tag} ${change.selector}: "${change.text}"`);
                    }
                });
            }

            if (currentState.currentPrices.length > 0) {
                console.log(`   üí∞ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:`);
                currentState.currentPrices.forEach((price, i) => {
                    console.log(`      ${i+1}. ${price.text} (${price.tag}${price.className ? '.' + price.className.split(' ')[0] : ''})`);
                });
            }

            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ü–µ–Ω—ã, –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Ä–∞–Ω—å—à–µ
            if (currentState.currentPrices.length >= 3) {
                console.log('\nüéâ –ù–ê–ô–î–ï–ù–û –î–û–°–¢–ê–¢–û–ß–ù–û –¶–ï–ù! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
                break;
            }
        }

        // –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´:');
        const finalAnalysis = await page.evaluate(() => {
            // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
            const priceElements = [];
            const allElements = document.querySelectorAll('*');
            
            allElements.forEach(el => {
                const text = el.textContent?.trim() || '';
                if (text.match(/\d+.*‚Ç¥|‚Ç¥.*\d+|\d+\s*–≥—Ä–Ω|–≥—Ä–Ω\s*\d+/) && text.length < 50) {
                    priceElements.push({
                        text: text,
                        tag: el.tagName,
                        id: el.id,
                        className: el.className,
                        selector: el.id ? `#${el.id}` : 
                                 el.className ? `.${el.className.split(' ')[0]}` :
                                 el.tagName.toLowerCase(),
                        parentSelector: el.parentElement?.id ? `#${el.parentElement.id}` :
                                       el.parentElement?.className ? `.${el.parentElement.className.split(' ')[0]}` :
                                       el.parentElement?.tagName.toLowerCase()
                    });
                }
            });

            return {
                totalPriceElements: priceElements.length,
                priceElements: priceElements,
                url: window.location.href,
                title: document.title
            };
        });

        console.log(`   üí∞ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: ${finalAnalysis.totalPriceElements}`);
        if (finalAnalysis.priceElements.length > 0) {
            console.log('   üìã –ù–ê–ô–î–ï–ù–ù–´–ï –¶–ï–ù–´:');
            finalAnalysis.priceElements.forEach((price, i) => {
                console.log(`      ${i+1}. "${price.text}" - ${price.selector} (parent: ${price.parentSelector})`);
            });
        }

        console.log('\n‚è±Ô∏è –ñ–¥–µ–º –µ—â–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...');
        await page.waitForTimeout(10000);

        return finalAnalysis;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
        return null;
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
if (require.main === module) {
    monitorResultsAppearance()
        .then((result) => {
            console.log('\nüéâ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!');
            if (result && result.totalPriceElements > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.totalPriceElements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏`);
            } else {
                console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { monitorResultsAppearance };
