/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô –°–ï–õ–ï–ö–¢–û–† –ü–ï–†–ò–û–î–ê
 * –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º Select
 */

const puppeteer = require('puppeteer');

class AdvancedPeriodSelector {
    constructor(page) {
        this.page = page;
    }

    async selectPeriodMethod1(months) {
        console.log(`üîÑ –ú–µ—Ç–æ–¥ 1: –ö–ª–∏–∫ –ø–æ label –æ–ø—Ü–∏–∏ (${months} –º–µ—Å—è—Ü–µ–≤)`);
        
        try {
            await this.page.waitForSelector('#coverageTime', { timeout: 10000 });
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
            await this.page.click('#coverageTime');
            await this.page.waitForTimeout(500);
            
            // –ò—â–µ–º label —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
            const labels = await this.page.$$('#coverageTime .Select__option');
            
            for (const label of labels) {
                const text = await label.evaluate(el => el.textContent.trim());
                if (text === targetText) {
                    await label.click();
                    await this.page.waitForTimeout(1000);
                    return true;
                }
            }
            return false;
        } catch (error) {
            console.error(`‚ùå –ú–µ—Ç–æ–¥ 1 –æ—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }

    async selectPeriodMethod2(months) {
        console.log(`üîÑ –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ radio input (${months} –º–µ—Å—è—Ü–µ–≤)`);
        
        try {
            await this.page.waitForSelector('#coverageTime', { timeout: 10000 });
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
            await this.page.click('#coverageTime');
            await this.page.waitForTimeout(500);
            
            // –ò—â–µ–º —Å–∫—Ä—ã—Ç—ã–µ radio inputs
            const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
            const result = await this.page.evaluate((text) => {
                const radios = document.querySelectorAll('#coverageTime input[type="radio"]');
                for (const radio of radios) {
                    const label = radio.parentElement?.textContent?.trim();
                    if (label && label.includes(text)) {
                        radio.click();
                        return true;
                    }
                }
                return false;
            }, targetText);
            
            await this.page.waitForTimeout(1000);
            return result;
        } catch (error) {
            console.error(`‚ùå –ú–µ—Ç–æ–¥ 2 –æ—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }

    async selectPeriodMethod3(months) {
        console.log(`üîÑ –ú–µ—Ç–æ–¥ 3: –ü—Ä—è–º–æ–π click –ø–æ —Ç–µ–∫—Å—Ç—É (${months} –º–µ—Å—è—Ü–µ–≤)`);
        
        try {
            await this.page.waitForSelector('#coverageTime', { timeout: 10000 });
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
            await this.page.click('#coverageTime');
            await this.page.waitForTimeout(500);
            
            // –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –æ–ø—Ü–∏–∏
            const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
            const clicked = await this.page.evaluate((text) => {
                const elements = Array.from(document.querySelectorAll('#coverageTime *'));
                for (const el of elements) {
                    if (el.textContent?.trim() === text) {
                        el.click();
                        return true;
                    }
                }
                return false;
            }, targetText);
            
            await this.page.waitForTimeout(1000);
            return clicked;
        } catch (error) {
            console.error(`‚ùå –ú–µ—Ç–æ–¥ 3 –æ—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }

    async selectPeriodMethod4(months) {
        console.log(`üîÑ –ú–µ—Ç–æ–¥ 4: –°–æ–±—ã—Ç–∏–µ change (${months} –º–µ—Å—è—Ü–µ–≤)`);
        
        try {
            await this.page.waitForSelector('#coverageTime', { timeout: 10000 });
            
            const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
            const result = await this.page.evaluate((text) => {
                const coverageTime = document.querySelector('#coverageTime');
                if (!coverageTime) return false;
                
                // –ü—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã–∑–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
                const event = new Event('change', { bubbles: true });
                const clickEvent = new Event('click', { bubbles: true });
                
                coverageTime.dispatchEvent(clickEvent);
                
                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
                const elements = coverageTime.querySelectorAll('*');
                for (const el of elements) {
                    if (el.textContent?.trim() === text) {
                        el.click();
                        el.dispatchEvent(clickEvent);
                        el.dispatchEvent(event);
                        return true;
                    }
                }
                return false;
            }, targetText);
            
            await this.page.waitForTimeout(1000);
            return result;
        } catch (error) {
            console.error(`‚ùå –ú–µ—Ç–æ–¥ 4 –æ—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }

    async getCurrentPeriod() {
        try {
            const text = await this.page.$eval(
                '#coverageTime .Select__placeholder', 
                el => el.textContent.trim()
            );
            return text;
        } catch (error) {
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }

    async testAllMethods(months) {
        console.log(`\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –í–°–ï –ú–ï–¢–û–î–´ –î–õ–Ø ${months} –ú–ï–°–Ø–¶–ï–í`);
        console.log('-'.repeat(50));

        const methods = [
            { name: '–ú–µ—Ç–æ–¥ 1', func: this.selectPeriodMethod1 },
            { name: '–ú–µ—Ç–æ–¥ 2', func: this.selectPeriodMethod2 },
            { name: '–ú–µ—Ç–æ–¥ 3', func: this.selectPeriodMethod3 },
            { name: '–ú–µ—Ç–æ–¥ 4', func: this.selectPeriodMethod4 }
        ];

        for (const method of methods) {
            console.log(`\nüìù –ü–µ—Ä–∏–æ–¥ –¥–æ: ${await this.getCurrentPeriod()}`);
            const result = await method.func.call(this, months);
            console.log(`üìù –ü–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ: ${await this.getCurrentPeriod()}`);
            console.log(`${method.name}: ${result ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –ù–µ—É–¥–∞—á–∞'}`);
            
            if (result) {
                console.log(`üéâ ${method.name} –°–†–ê–ë–û–¢–ê–õ!`);
                return true;
            }
            
            await this.page.waitForTimeout(1000);
        }

        return false;
    }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
async function testAllPeriodMethods() {
    console.log('üß™ –¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í –°–ï–õ–ï–ö–¢–û–†–ê –ü–ï–†–ò–û–î–ê');
    console.log('=' .repeat(50));

    let browser;
    try {
        browser = await puppeteer.launch({
            headless: false, // –í–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();
        await page.setViewport({ width: 1366, height: 768 });

        console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.keyboard.down('Meta');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Meta');
        await page.type('#autoNumberSearch', 'AA1111AA');

        const selector = new AdvancedPeriodSelector(page);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º 6 –º–µ—Å—è—Ü–µ–≤
        const result6 = await selector.testAllMethods(6);
        
        await page.waitForTimeout(2000);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º 12 –º–µ—Å—è—Ü–µ–≤
        const result12 = await selector.testAllMethods(12);

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log(`6 –º–µ—Å—è—Ü–µ–≤: ${result6 ? '‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥' : '‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ—É–¥–∞—á–Ω—ã'}`);
        console.log(`12 –º–µ—Å—è—Ü–µ–≤: ${result12 ? '‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥' : '‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ—É–¥–∞—á–Ω—ã'}`);

        console.log('\n‚è±Ô∏è –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...');
        await page.waitForTimeout(5000);

        return {
            success: true,
            results: { result6, result12 }
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
        return {
            success: false,
            error: error.message
        };
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    testAllPeriodMethods()
        .then((result) => {
            console.log('\nüéâ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { AdvancedPeriodSelector };
