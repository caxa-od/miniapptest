/**
 * –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–ï–õ–ï–ö–¢–û–† –ü–ï–†–ò–û–î–ê
 * –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Select
 */

const puppeteer = require('puppeteer');

class PeriodSelector {
    constructor(page) {
        this.page = page;
    }

    async selectPeriod(months) {
        console.log(`üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤...`);
        
        try {
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            await this.page.waitForSelector('#coverageTime', { timeout: 10000 });
            console.log('‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞–π–¥–µ–Ω');

            // –ö–ª–∏–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫
            await this.page.click('#coverageTime .Select__placeholder');
            console.log('üì± –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É');

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–ø—Ü–∏–π
            await this.page.waitForSelector('#coverageTime .Select__option', { timeout: 5000 });
            console.log('‚úÖ –û–ø—Ü–∏–∏ –ø–æ—è–≤–∏–ª–∏—Å—å');

            // –ò—â–µ–º –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é
            const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
            console.log(`üîç –ò—â–µ–º –æ–ø—Ü–∏—é: "${targetText}"`);

            // –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω—É–∂–Ω–æ–π –æ–ø—Ü–∏–∏
            const options = await this.page.$$('#coverageTime .Select__option');
            let found = false;

            for (const option of options) {
                const text = await option.evaluate(el => el.textContent.trim());
                console.log(`   –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏—é: "${text}"`);
                
                if (text === targetText) {
                    await option.click();
                    console.log(`‚úÖ –í—ã–±—Ä–∞–ª–∏: "${text}"`);
                    found = true;
                    break;
                }
            }

            if (!found) {
                throw new Error(`–û–ø—Ü–∏—è "${targetText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }

            // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
            await this.page.waitForTimeout(1000);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±–æ—Ä –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è
            const selectedText = await this.page.$eval(
                '#coverageTime .Select__placeholder', 
                el => el.textContent.trim()
            );

            if (selectedText.includes(targetText) || selectedText !== '–í–∏–±–µ—Ä—ñ—Ç—å') {
                console.log(`‚úÖ –ü–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω: ${selectedText}`);
                return true;
            } else {
                console.log(`‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –≤—ã–±—Ä–∞–ª—Å—è: ${selectedText}`);
                return false;
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: ${error.message}`);
            return false;
        }
    }

    async getCurrentPeriod() {
        try {
            const text = await this.page.$eval(
                '#coverageTime .Select__placeholder', 
                el => el.textContent.trim()
            );
            return text;
        } catch (error) {
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
async function testPeriodSelector() {
    console.log('üß™ –¢–ï–°–¢ –°–ï–õ–ï–ö–¢–û–†–ê –ü–ï–†–ò–û–î–ê');
    console.log('=' .repeat(40));

    let browser;
    try {
        browser = await puppeteer.launch({
            headless: false, // –í–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();
        await page.setViewport({ width: 1366, height: 768 });

        console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.keyboard.down('Meta');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Meta');
        await page.type('#autoNumberSearch', 'AA1111AA');

        const selector = new PeriodSelector(page);

        console.log('\nüîç –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥:', await selector.getCurrentPeriod());

        console.log('\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä 6 –º–µ—Å—è—Ü–µ–≤...');
        const result6 = await selector.selectPeriod(6);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç 6 –º–µ—Å—è—Ü–µ–≤:', result6 ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
        console.log('–ü–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞:', await selector.getCurrentPeriod());

        await page.waitForTimeout(2000);

        console.log('\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä 12 –º–µ—Å—è—Ü–µ–≤...');
        const result12 = await selector.selectPeriod(12);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç 12 –º–µ—Å—è—Ü–µ–≤:', result12 ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
        console.log('–ü–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞:', await selector.getCurrentPeriod());

        console.log('\n‚è±Ô∏è –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...');
        await page.waitForTimeout(5000);

        return {
            success: true,
            results: { result6, result12 }
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
        return {
            success: false,
            error: error.message
        };
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    testPeriodSelector()
        .then((result) => {
            console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
            if (result.success) {
                console.log('‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            } else {
                console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞');
            }
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { PeriodSelector };
