/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–õ–ï–ö–¢–û–†–û–í –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
 * –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
 */

const puppeteer = require('puppeteer');

async function diagnoseResultSelectors() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–õ–ï–ö–¢–û–†–û–í –†–ï–ó–£–õ–¨–¢–ê–¢–û–í');
    console.log('=' .repeat(50));

    let browser;
    try {
        browser = await puppeteer.launch({
            headless: false, // –í–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();
        await page.setViewport({ width: 1366, height: 768 });

        console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.keyboard.down('Meta');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Meta');
        await page.type('#autoNumberSearch', 'AA1111AA');

        console.log('üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ 6 –º–µ—Å—è—Ü–µ–≤...');
        await page.waitForSelector('#coverageTime', { timeout: 10000 });
        await page.click('#coverageTime');
        await page.waitForTimeout(500);
        
        const labels = await page.$$('#coverageTime .Select__option');
        for (const label of labels) {
            const text = await label.evaluate(el => el.textContent.trim());
            if (text === '6 –º—ñ—Å—è—Ü—ñ–≤') {
                await label.click();
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: 6 –º–µ—Å—è—Ü–µ–≤');
                break;
            }
        }

        console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
        await page.click('#btnCalculateNumber');

        console.log('‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –∏ —Å–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        await page.waitForTimeout(10000);

        // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const analysis = await page.evaluate(() => {
            const results = {
                url: window.location.href,
                title: document.title,
                allClasses: [],
                allIds: [],
                possibleResultSelectors: [],
                offerElements: [],
                priceElements: [],
                errorElements: []
            };

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ ID
            const allElements = document.querySelectorAll('*');
            allElements.forEach(el => {
                if (el.className && typeof el.className === 'string') {
                    el.className.split(' ').forEach(cls => {
                        if (cls && !results.allClasses.includes(cls)) {
                            results.allClasses.push(cls);
                        }
                    });
                }
                if (el.id && !results.allIds.includes(el.id)) {
                    results.allIds.push(el.id);
                }
            });

            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            const resultKeywords = ['offer', 'result', 'price', 'company', 'list', 'insurance', 'card'];
            results.allClasses.forEach(cls => {
                const lowerCls = cls.toLowerCase();
                if (resultKeywords.some(keyword => lowerCls.includes(keyword))) {
                    results.possibleResultSelectors.push(`.${cls}`);
                }
            });

            results.allIds.forEach(id => {
                const lowerId = id.toLowerCase();
                if (resultKeywords.some(keyword => lowerId.includes(keyword))) {
                    results.possibleResultSelectors.push(`#${id}`);
                }
            });

            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
            allElements.forEach(el => {
                const text = el.textContent?.trim() || '';
                if (text.match(/\d+.*‚Ç¥|‚Ç¥.*\d+|\d+\s*–≥—Ä–Ω|–≥—Ä–Ω\s*\d+/)) {
                    results.priceElements.push({
                        tag: el.tagName,
                        className: el.className,
                        id: el.id,
                        text: text.substring(0, 100),
                        selector: el.id ? `#${el.id}` : 
                                 el.className ? `.${el.className.split(' ')[0]}` :
                                 el.tagName.toLowerCase()
                    });
                }
            });

            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π
            allElements.forEach(el => {
                const text = el.textContent?.trim() || '';
                if (text.length > 3 && text.length < 50 && 
                    (text.toLowerCase().includes('—Å—Ç—Ä–∞—Ö') || 
                     text.toLowerCase().includes('insurance') ||
                     text.toLowerCase().includes('–∫–æ–º–ø–∞–Ω'))) {
                    results.offerElements.push({
                        tag: el.tagName,
                        className: el.className,
                        id: el.id,
                        text: text.substring(0, 100),
                        selector: el.id ? `#${el.id}` : 
                                 el.className ? `.${el.className.split(' ')[0]}` :
                                 el.tagName.toLowerCase()
                    });
                }
            });

            // –ò—â–µ–º –æ—à–∏–±–∫–∏
            allElements.forEach(el => {
                const text = el.textContent?.trim() || '';
                if (text.toLowerCase().includes('–æ—à–∏–±–∫–∞') ||
                    text.toLowerCase().includes('error') ||
                    text.toLowerCase().includes('–ø–æ–º–∏–ª–∫–∞') ||
                    text.toLowerCase().includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                    results.errorElements.push({
                        tag: el.tagName,
                        text: text.substring(0, 200)
                    });
                }
            });

            return results;
        });

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
        console.log('=' .repeat(40));
        console.log(`URL: ${analysis.url}`);
        console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${analysis.title}`);

        console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: ${analysis.allClasses.length}`);
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ID: ${analysis.allIds.length}`);

        if (analysis.possibleResultSelectors.length > 0) {
            console.log('\nüìã –í–û–ó–ú–û–ñ–ù–´–ï –°–ï–õ–ï–ö–¢–û–†–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
            analysis.possibleResultSelectors.slice(0, 10).forEach(selector => {
                console.log(`   ${selector}`);
            });
        }

        if (analysis.priceElements.length > 0) {
            console.log('\nüí∞ –≠–õ–ï–ú–ï–ù–¢–´ –° –¶–ï–ù–ê–ú–ò:');
            analysis.priceElements.slice(0, 5).forEach(el => {
                console.log(`   ${el.selector}: "${el.text}"`);
            });
        }

        if (analysis.offerElements.length > 0) {
            console.log('\nüè¢ –≠–õ–ï–ú–ï–ù–¢–´ –° –ö–û–ú–ü–ê–ù–ò–Ø–ú–ò:');
            analysis.offerElements.slice(0, 5).forEach(el => {
                console.log(`   ${el.selector}: "${el.text}"`);
            });
        }

        if (analysis.errorElements.length > 0) {
            console.log('\n‚ùå –≠–õ–ï–ú–ï–ù–¢–´ –° –û–®–ò–ë–ö–ê–ú–ò:');
            analysis.errorElements.forEach(el => {
                console.log(`   ${el.tag}: "${el.text}"`);
            });
        }

        console.log('\n‚è±Ô∏è –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...');
        await page.waitForTimeout(10000);

        return analysis;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
        return null;
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
    diagnoseResultSelectors()
        .then((result) => {
            console.log('\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { diagnoseResultSelectors };
