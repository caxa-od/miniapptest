/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –≠–ö–°–¢–†–ê–ö–¢–û–†–ê RISKINS INSURANCE
 * –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞
 */

const puppeteer = require('puppeteer');

class RiskinsExtractorFinal {
    constructor(options = {}) {
        this.baseUrl = 'https://riskins-insurance.eua.in.ua/';
        this.options = {
            headless: true,
            timeout: 30000,
            ...options
        };
    }

    async getInsuranceOffers(vehicleNumber) {
        let browser;
        try {
            browser = await puppeteer.launch({
                headless: this.options.headless,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');
            await page.setViewport({ width: 1366, height: 768 });

            console.log('üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º Riskins Insurance...');
            await page.goto(this.baseUrl, { waitUntil: 'networkidle2' });

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä:', vehicleNumber);
            await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await page.click('#autoNumberSearch');
            await page.keyboard.down('Meta');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Meta');
            await page.type('#autoNumberSearch', vehicleNumber);

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
            const submitButton = await page.$('#btnCalculateNumber, #btnCalculateSearch');
            if (!submitButton) {
                throw new Error('–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            await submitButton.click();

            console.log('‚è±Ô∏è  –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            await page.waitForTimeout(10000);

            console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...');
            const offers = await this.extractInsuranceData(page);

            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

            return {
                success: true,
                vehicleNumber,
                offers,
                totalOffers: offers.length,
                timestamp: new Date().toISOString(),
                extractedAt: 'Riskins Insurance Ukraine'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
            return {
                success: false,
                error: error.message,
                timestamp: new Date().toISOString()
            };
        } finally {
            if (browser) {
                await browser.close();
            }
        }
    }

    async extractInsuranceData(page) {
        return await page.evaluate(() => {
            const offers = [];

            // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            const tableRows = document.querySelectorAll('table tr, .Table tr');
            
            tableRows.forEach((row, index) => {
                const rowText = row.textContent;
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if (!rowText || rowText.includes('–¶—ñ–Ω–∞') || rowText.includes('–ö–æ–º–ø–∞–Ω—ñ—è')) {
                    return;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                const priceCell = row.querySelector('.Table__cell_price, td[class*="price"], .price');
                const discountCell = row.querySelector('.Table__discount, .discount');
                
                if (priceCell || rowText.includes('–≥—Ä–Ω')) {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                    let currentPrice = 0;
                    let oldPrice = null;
                    
                    const priceText = priceCell ? priceCell.textContent : rowText;
                    const priceMatch = priceText.match(/(\d{3,5})\s*–≥—Ä–Ω/g);
                    
                    if (priceMatch) {
                        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã
                        const prices = priceMatch.map(p => parseInt(p.replace(/\D/g, '')));
                        currentPrice = Math.min(...prices); // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è
                        if (prices.length > 1) {
                            oldPrice = Math.max(...prices); // –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è
                        }
                    }

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∫–∏–¥–∫—É
                    let discount = null;
                    if (discountCell) {
                        const discountMatch = discountCell.textContent.match(/(\d+)%/);
                        if (discountMatch) {
                            discount = parseInt(discountMatch[1]);
                        }
                    }

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                    let companyName = `–ö–æ–º–ø–∞–Ω–∏—è ${offers.length + 1}`;
                    
                    // –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
                    const companyPatterns = {
                        'USG': /USG/i,
                        'ARX': /ARX/i,
                        '–ö–ù–Ø–ñ–ê': /–ö–ù–Ø–ñ–ê/i,
                        '–ï–¢–ê–õ–û–ù': /–ï–¢–ê–õ–û–ù/i,
                        '–ö–†–ï–î–û': /–ö–†–ï–î–û/i,
                        '–û–†–ê–ù–¢–ê': /–û–†–ê–ù–¢–ê/i,
                        '–£–ü–°–ö': /–£–ü–°–ö/i,
                        'PZU': /PZU/i,
                        '–£–ù–Ü–ö–ê': /–£–ù–Ü–ö–ê/i,
                        '–Ü–ù–ì–û': /–Ü–ù–ì–û/i
                    };

                    for (const [company, pattern] of Object.entries(companyPatterns)) {
                        if (pattern.test(rowText)) {
                            companyName = company;
                            break;
                        }
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞
                    if (currentPrice > 0) {
                        offers.push({
                            id: `riskins_${Date.now()}_${index}`,
                            companyName,
                            price: currentPrice,
                            oldPrice,
                            discount,
                            currency: '–≥—Ä–Ω',
                            rating: 5, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            status: '–î–æ—Å—Ç—É–ø–Ω–æ',
                            features: [],
                            source: 'Riskins Insurance',
                            rawData: rowText.substring(0, 200) // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        });
                    }
                }
            });

            // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            if (offers.length === 0) {
                const priceElements = document.querySelectorAll('.Table__cell_price, [class*="price"]');
                priceElements.forEach((el, index) => {
                    const priceText = el.textContent;
                    const priceMatch = priceText.match(/(\d{3,5})/);
                    
                    if (priceMatch) {
                        offers.push({
                            id: `riskins_alt_${Date.now()}_${index}`,
                            companyName: `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${index + 1}`,
                            price: parseInt(priceMatch[1]),
                            currency: '–≥—Ä–Ω',
                            rating: 5,
                            status: '–î–æ—Å—Ç—É–ø–Ω–æ',
                            source: 'Riskins Insurance (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)',
                            rawData: priceText
                        });
                    }
                });
            }

            return offers;
        });
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async function testFinalExtractor() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ô –í–ï–†–°–ò–ò –≠–ö–°–¢–†–ê–ö–¢–û–†–ê\n');
    
    const extractor = new RiskinsExtractorFinal({
        headless: true // –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    });
    
    const testNumbers = ['AA1234AA', 'BB5678CC', 'DD9999EE'];
    
    for (const number of testNumbers) {
        console.log(`\nüöó –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä: ${number}`);
        console.log('‚îÄ'.repeat(50));
        
        const result = await extractor.getInsuranceOffers(number);
        
        if (result.success) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${result.totalOffers} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:`);
            
            result.offers.forEach((offer, index) => {
                console.log(`\n${index + 1}. ${offer.companyName}`);
                console.log(`   üí∞ –¶–µ–Ω–∞: ${offer.price} ${offer.currency}`);
                if (offer.oldPrice) {
                    console.log(`   üè∑Ô∏è  –ë—ã–ª–∞: ${offer.oldPrice} ${offer.currency}`);
                }
                if (offer.discount) {
                    console.log(`   üéØ –°–∫–∏–¥–∫–∞: ${offer.discount}%`);
                }
                console.log(`   üìù –°—Ç–∞—Ç—É—Å: ${offer.status}`);
            });
            
            // –í—ã–≤–æ–¥ JSON –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            console.log('\nüìã JSON –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:');
            console.log(JSON.stringify(result, null, 2));
            
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
    }
    
    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
}

// –≠–∫—Å–ø–æ—Ä—Ç
module.exports = RiskinsExtractorFinal;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    testFinalExtractor();
}
