/**
 * –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–û–õ–£–ß–ï–ù–ò–Ø –¶–ï–ù –ù–ê 6 –ò 12 –ú–ï–°–Ø–¶–ï–í –î–õ–Ø AA1111AA
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
 */

const AutoPeriodExtractor = require('./auto-period-extractor.js');

async function testAutoPeriods() {
    console.log('ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –¶–ï–ù –î–õ–Ø AA1111AA');
    console.log('=' .repeat(55));
    console.log('üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º 6 –∏ 12 –º–µ—Å—è—Ü–µ–≤ –≤ headless —Ä–µ–∂–∏–º–µ');
    console.log('üö´ –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n');

    const extractor = new AutoPeriodExtractor();
    const vehicleNumber = 'AA1111AA';
    const results = [];

    // –¢–µ—Å—Ç 12 –º–µ—Å—è—Ü–µ–≤
    console.log('üìÖ –¢–ï–°–¢ 1: 12 –ú–ï–°–Ø–¶–ï–í');
    console.log('-' .repeat(30));
    try {
        const result12 = await extractor.getInsuranceOffers(vehicleNumber, 12);
        results.push({ period: 12, ...result12 });
        
        if (result12.success) {
            console.log(`‚úÖ 12 –º–µ—Å—è—Ü–µ–≤: ${result12.totalOffers} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);
            const prices12 = result12.offers.map(o => o.price).sort((a, b) => a - b);
            console.log(`üí∞ –¶–µ–Ω—ã: ${prices12.join('‚Ç¥, ')}‚Ç¥`);
            const avg12 = Math.round(prices12.reduce((a, b) => a + b, 0) / prices12.length);
            console.log(`üìä –°—Ä–µ–¥–Ω—è—è: ${avg12}‚Ç¥`);
        } else {
            console.log(`‚ùå 12 –º–µ—Å—è—Ü–µ–≤: ${result12.error}`);
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ 12 –º–µ—Å—è—Ü–µ–≤: ${error.message}`);
    }

    console.log('\n‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏...');
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –¢–µ—Å—Ç 6 –º–µ—Å—è—Ü–µ–≤
    console.log('\nüìÖ –¢–ï–°–¢ 2: 6 –ú–ï–°–Ø–¶–ï–í');
    console.log('-' .repeat(30));
    try {
        const result6 = await extractor.getInsuranceOffers(vehicleNumber, 6);
        results.push({ period: 6, ...result6 });
        
        if (result6.success) {
            console.log(`‚úÖ 6 –º–µ—Å—è—Ü–µ–≤: ${result6.totalOffers} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);
            const prices6 = result6.offers.map(o => o.price).sort((a, b) => a - b);
            console.log(`üí∞ –¶–µ–Ω—ã: ${prices6.join('‚Ç¥, ')}‚Ç¥`);
            const avg6 = Math.round(prices6.reduce((a, b) => a + b, 0) / prices6.length);
            console.log(`üìä –°—Ä–µ–¥–Ω—è—è: ${avg6}‚Ç¥`);
        } else {
            console.log(`‚ùå 6 –º–µ—Å—è—Ü–µ–≤: ${result6.error}`);
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ 6 –º–µ—Å—è—Ü–µ–≤: ${error.message}`);
    }

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const successful = results.filter(r => r.success && r.offers && r.offers.length > 0);
    
    if (successful.length >= 2) {
        console.log('\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
        console.log('=' .repeat(50));

        const result6 = successful.find(r => r.period === 6);
        const result12 = successful.find(r => r.period === 12);

        if (result6 && result12) {
            const prices6 = result6.offers.map(o => o.price);
            const prices12 = result12.offers.map(o => o.price);
            
            const avg6 = Math.round(prices6.reduce((a, b) => a + b, 0) / prices6.length);
            const avg12 = Math.round(prices12.reduce((a, b) => a + b, 0) / prices12.length);

            console.log(`\nüìÖ 6 –º–µ—Å—è—Ü–µ–≤:`);
            console.log(`   üí∞ –î–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...prices6)}‚Ç¥ - ${Math.max(...prices6)}‚Ç¥`);
            console.log(`   üìà –°—Ä–µ–¥–Ω—è—è: ${avg6}‚Ç¥`);
            console.log(`   üìã –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥: ${result6.selectedPeriod}`);

            console.log(`\nüìÖ 12 –º–µ—Å—è—Ü–µ–≤:`);
            console.log(`   üí∞ –î–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...prices12)}‚Ç¥ - ${Math.max(...prices12)}‚Ç¥`);
            console.log(`   üìà –°—Ä–µ–¥–Ω—è—è: ${avg12}‚Ç¥`);
            console.log(`   üìã –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥: ${result12.selectedPeriod}`);

            const difference = Math.abs(avg12 - avg6);
            const percentDiff = Math.round((difference / avg6) * 100);

            console.log(`\nüéØ –ê–ù–ê–õ–ò–ó:`);
            console.log(`   üí≤ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ: ${difference}‚Ç¥`);
            console.log(`   üìä –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö: ${percentDiff}%`);
            
            if (avg12 > avg6) {
                console.log(`   üí° 12 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ä–æ–∂–µ –Ω–∞ ${avg12 - avg6}‚Ç¥`);
            } else if (avg6 > avg12) {
                console.log(`   üí° 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ä–æ–∂–µ –Ω–∞ ${avg6 - avg12}‚Ç¥`);
            } else {
                console.log(`   üí° –¶–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ`);
            }

            // –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            const cheapest6 = result6.offers.reduce((min, offer) => offer.price < min.price ? offer : min);
            const cheapest12 = result12.offers.reduce((min, offer) => offer.price < min.price ? offer : min);

            console.log(`\nüèÜ –õ–£–ß–®–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:`);
            console.log(`   üìÖ 6 –º–µ—Å: ${cheapest6.companyName} - ${cheapest6.price}‚Ç¥`);
            console.log(`   üìÖ 12 –º–µ—Å: ${cheapest12.companyName} - ${cheapest12.price}‚Ç¥`);
        }
    } else {
        console.log('\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
        results.forEach(result => {
            if (!result.success) {
                console.log(`‚ùå ${result.period} –º–µ—Å—è—Ü–µ–≤: ${result.error}`);
            }
        });
    }

    return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    testAutoPeriods()
        .then((results) => {
            console.log('\nüéâ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            console.log('‚ú® –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞');
            process.exit(0);
        })
        .catch(error => {
            console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { testAutoPeriods };
