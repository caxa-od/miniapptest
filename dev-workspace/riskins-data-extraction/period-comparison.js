/**
 * –¢–û–ß–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –¶–ï–ù –ù–ê 6 –ò 12 –ú–ï–°–Ø–¶–ï–í
 * –†—É—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
 */

const puppeteer = require('puppeteer');

class PeriodComparison {
    constructor() {
        this.results = {
            month6: null,
            month12: null,
            comparison: null
        };
    }

    async comparePeriods(vehicleNumber = 'AA1234AA') {
        console.log('üéØ –¢–û–ß–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ò–û–î–û–í –°–¢–†–ê–•–û–í–ê–ù–ò–Ø');
        console.log('‚ïê'.repeat(60));
        console.log(`üöó –ù–æ–º–µ—Ä: ${vehicleNumber}`);
        console.log('');

        // –¢–µ—Å—Ç 1: 6 –º–µ—Å—è—Ü–µ–≤
        console.log('üìÖ –≠–¢–ê–ü 1: –¢–ï–°–¢–ò–†–£–ï–ú 6 –ú–ï–°–Ø–¶–ï–í');
        console.log('‚îÄ'.repeat(50));
        this.results.month6 = await this.testPeriod(vehicleNumber, 6);
        
        console.log('\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
        await this.waitForEnter();

        // –¢–µ—Å—Ç 2: 12 –º–µ—Å—è—Ü–µ–≤
        console.log('\nüìÖ –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–£–ï–ú 12 –ú–ï–°–Ø–¶–ï–í');
        console.log('‚îÄ'.repeat(50));
        this.results.month12 = await this.testPeriod(vehicleNumber, 12);

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        console.log('\nüìä –≠–¢–ê–ü 3: –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í');
        console.log('‚îÄ'.repeat(50));
        this.compareResults();

        return this.results;
    }

    async testPeriod(vehicleNumber, months) {
        console.log(`üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${months} –º–µ—Å—è—Ü–µ–≤...`);
        
        const browser = await puppeteer.launch({
            headless: false, // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
            defaultViewport: null
        });

        try {
            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');

            console.log('  üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
            await page.goto('https://riskins-insurance.eua.in.ua/', { 
                waitUntil: 'networkidle2' 
            });

            console.log(`  üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä ${vehicleNumber}...`);
            await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await page.click('#autoNumberSearch');
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–¥–µ–ª–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            await page.keyboard.down('Meta');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Meta');
            await page.type('#autoNumberSearch', vehicleNumber);

            console.log(`  üìÖ –í–´–ë–ï–†–ò–¢–ï ${months} –ú–ï–°–Ø–¶–ï–í –≤ dropdown "–ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó"`);
            console.log('  üéØ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"');
            console.log('  ‚è∏Ô∏è  –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª –∫–æ–≥–¥–∞ —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');

            // –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞ –∫–∞–∫ —Å–∏–≥–Ω–∞–ª —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ—Ç–æ–≤—ã
            await page.waitForFunction(() => {
                return new Promise(resolve => {
                    const handler = (e) => {
                        if (e.code === 'Space') {
                            document.removeEventListener('keydown', handler);
                            resolve(true);
                        }
                    };
                    document.addEventListener('keydown', handler);
                });
            }, { timeout: 120000 }); // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ä—É—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

            console.log('  üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            const selectedPeriod = await page.evaluate(() => {
                const selects = document.querySelectorAll('select');
                for (const select of selects) {
                    const selectedOption = select.options[select.selectedIndex];
                    if (selectedOption && selectedOption.text.includes('–º—ñ—Å—è—Ü')) {
                        return selectedOption.text.trim();
                    }
                }
                return '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
            });

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            const offers = await page.evaluate(() => {
                const results = [];
                
                // –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                const tableRows = document.querySelectorAll('table tr, .Table tr');
                
                tableRows.forEach((row, index) => {
                    const rowText = row.textContent;
                    
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    if (!rowText || rowText.includes('–¶—ñ–Ω–∞') || rowText.includes('–ö–æ–º–ø–∞–Ω—ñ—è') || 
                        rowText.includes('–†–µ–π—Ç–∏–Ω–≥') || rowText.length < 20) {
                        return;
                    }

                    // –ò—â–µ–º —Ü–µ–Ω—ã –≤ –≥—Ä–∏–≤–Ω–∞—Ö
                    const priceMatches = rowText.match(/(\d{3,5})\s*–≥—Ä–Ω/g);
                    if (priceMatches && priceMatches.length > 0) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
                        const prices = priceMatches.map(p => parseInt(p.replace(/\D/g, '')));
                        const currentPrice = Math.min(...prices);
                        const oldPrice = prices.length > 1 ? Math.max(...prices) : null;
                        
                        // –ò—â–µ–º —Å–∫–∏–¥–∫—É
                        const discountMatch = rowText.match(/(\d+)%/);
                        const discount = discountMatch ? parseInt(discountMatch[1]) : null;
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                        let companyName = `–ö–æ–º–ø–∞–Ω–∏—è ${results.length + 1}`;
                        const companyPatterns = {
                            'USG': /USG/i,
                            'ARX': /ARX/i,
                            '–ö–ù–Ø–ñ–ê': /(–ö–ù–Ø–ñ–ê|KNYAZHA)/i,
                            '–ï–¢–ê–õ–û–ù': /(–ï–¢–ê–õ–û–ù|ETALON)/i,
                            '–ö–†–ï–î–û': /(–ö–†–ï–î–û|KREDO)/i,
                            '–û–†–ê–ù–¢–ê': /(–û–†–ê–ù–¢–ê|ORANTA)/i,
                            '–£–ü–°–ö': /–£–ü–°–ö/i,
                            'PZU': /PZU/i,
                            '–£–ù–Ü–ö–ê': /(–£–ù–Ü–ö–ê|UNIKA)/i,
                            '–Ü–ù–ì–û': /(–Ü–ù–ì–û|INGO)/i,
                            '–ü–†–û–í–Ü–î–ù–ê': /(–ü–†–û–í–Ü–î–ù–ê|PROVIDNA)/i,
                            '–ê–õ–¨–§–ê': /(–ê–õ–¨–§–ê|ALFA)/i
                        };

                        for (const [company, pattern] of Object.entries(companyPatterns)) {
                            if (pattern.test(rowText)) {
                                companyName = company;
                                break;
                            }
                        }

                        if (currentPrice > 500) { // –§–∏–ª—å—Ç—Ä —Ä–∞–∑—É–º–Ω—ã—Ö —Ü–µ–Ω
                            results.push({
                                id: `period_${months}_${index}`,
                                companyName,
                                price: currentPrice,
                                oldPrice,
                                discount,
                                currency: '–≥—Ä–Ω',
                                rawText: rowText.substring(0, 200),
                                elementType: row.tagName,
                                className: row.className
                            });
                        }
                    }
                });

                return results;
            });

            const result = {
                success: true,
                period: months,
                selectedPeriod,
                vehicleNumber,
                offers,
                totalOffers: offers.length,
                timestamp: new Date().toISOString(),
                statistics: this.calculateStatistics(offers)
            };

            console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤`);
            if (offers.length > 0) {
                console.log(`  üí∞ –¶–µ–Ω—ã: ${offers.map(o => o.price + '‚Ç¥').join(', ')}`);
                console.log(`  üìä –°—Ä–µ–¥–Ω—è—è: ${result.statistics.avgPrice}‚Ç¥`);
            }

            return result;

        } catch (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤:`, error.message);
            return {
                success: false,
                period: months,
                error: error.message,
                timestamp: new Date().toISOString()
            };
        } finally {
            await browser.close();
        }
    }

    calculateStatistics(offers) {
        if (offers.length === 0) {
            return { minPrice: 0, maxPrice: 0, avgPrice: 0 };
        }

        const prices = offers.map(o => o.price);
        return {
            minPrice: Math.min(...prices),
            maxPrice: Math.max(...prices),
            avgPrice: Math.round(prices.reduce((sum, p) => sum + p, 0) / prices.length)
        };
    }

    compareResults() {
        const { month6, month12 } = this.results;

        if (!month6?.success || !month12?.success) {
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            return;
        }

        if (month6.offers.length === 0 || month12.offers.length === 0) {
            console.log('‚ùå –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            return;
        }

        console.log('\nüí∞ –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:');
        console.log('‚ïê'.repeat(60));

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        console.log(`üìÖ 6 –º–µ—Å—è—Ü–µ–≤ (${month6.selectedPeriod}):`);
        console.log(`   üì¶ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${month6.totalOffers}`);
        console.log(`   üí∞ –¶–µ–Ω—ã: ${month6.statistics.minPrice}‚Ç¥ - ${month6.statistics.maxPrice}‚Ç¥`);
        console.log(`   üìä –°—Ä–µ–¥–Ω—è—è: ${month6.statistics.avgPrice}‚Ç¥`);

        console.log(`\nüìÖ 12 –º–µ—Å—è—Ü–µ–≤ (${month12.selectedPeriod}):`);
        console.log(`   üì¶ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${month12.totalOffers}`);
        console.log(`   üí∞ –¶–µ–Ω—ã: ${month12.statistics.minPrice}‚Ç¥ - ${month12.statistics.maxPrice}‚Ç¥`);
        console.log(`   üìä –°—Ä–µ–¥–Ω—è—è: ${month12.statistics.avgPrice}‚Ç¥`);

        // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        const priceDiff = month12.statistics.avgPrice - month6.statistics.avgPrice;
        const percentDiff = month6.statistics.avgPrice > 0 ? 
            Math.round((priceDiff / month6.statistics.avgPrice) * 100) : 0;

        console.log('\nüîç –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–ô:');
        console.log('‚îÄ'.repeat(40));
        console.log(`üí≤ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ: ${priceDiff}‚Ç¥ (${percentDiff}%)`);
        console.log(`üìà –†–∞–∑–Ω–∏—Ü–∞ –º–∏–Ω. —Ü–µ–Ω: ${month12.statistics.minPrice - month6.statistics.minPrice}‚Ç¥`);
        console.log(`üìà –†–∞–∑–Ω–∏—Ü–∞ –º–∞–∫—Å. —Ü–µ–Ω: ${month12.statistics.maxPrice - month6.statistics.maxPrice}‚Ç¥`);

        if (Math.abs(priceDiff) < 50) {
            console.log('üí° –¶–µ–Ω—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –ø–µ—Ä–∏–æ–¥ —Å–ª–∞–±–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å');
        } else if (priceDiff > 0) {
            console.log('üìà 12 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ä–æ–∂–µ - –µ—Å—Ç—å –∑–Ω–∞—á–∏–º–∞—è —Ä–∞–∑–Ω–∏—Ü–∞!');
        } else {
            console.log('üìâ 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ä–æ–∂–µ - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!');
        }

        // –ü–æ–∏—Å–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
        console.log('\nüè¢ –°–†–ê–í–ù–ï–ù–ò–ï –ü–û –ö–û–ú–ü–ê–ù–ò–Ø–ú:');
        console.log('‚îÄ'.repeat(40));
        
        const companies6 = new Map();
        month6.offers.forEach(offer => {
            companies6.set(offer.companyName, offer.price);
        });

        const companies12 = new Map();
        month12.offers.forEach(offer => {
            companies12.set(offer.companyName, offer.price);
        });

        const commonCompanies = [...companies6.keys()].filter(company => 
            companies12.has(company)
        );

        if (commonCompanies.length > 0) {
            commonCompanies.forEach(company => {
                const price6 = companies6.get(company);
                const price12 = companies12.get(company);
                const diff = price12 - price6;
                console.log(`${company}: ${price6}‚Ç¥ ‚Üí ${price12}‚Ç¥ (${diff > 0 ? '+' : ''}${diff}‚Ç¥)`);
            });
        } else {
            console.log('‚ùì –û–±—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        this.results.comparison = {
            priceDifference: priceDiff,
            percentDifference: percentDiff,
            commonCompanies: commonCompanies.length,
            conclusion: Math.abs(priceDiff) < 50 ? '–¶–µ–Ω—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ' : 
                       priceDiff > 0 ? '12 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ä–æ–∂–µ' : '6 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ä–æ–∂–µ'
        };

        console.log('\nüìã JSON –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log('‚ïê'.repeat(40));
        console.log(JSON.stringify(this.results, null, 2));
    }

    async waitForEnter() {
        return new Promise(resolve => {
            process.stdin.setRawMode(true);
            process.stdin.resume();
            process.stdin.on('data', () => {
                process.stdin.setRawMode(false);
                process.stdin.pause();
                resolve();
            });
        });
    }
}

// –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
async function runComparison() {
    const comparator = new PeriodComparison();
    
    console.log('üéØ –ó–ê–ü–£–°–ö –¢–û–ß–ù–û–ì–û –°–†–ê–í–ù–ï–ù–ò–Ø –ü–ï–†–ò–û–î–û–í');
    console.log('‚ïê'.repeat(60));
    console.log('üìù –ò–ù–°–¢–†–£–ö–¶–ò–ò:');
    console.log('1. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä');
    console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ dropdown');
    console.log('3. –ù–∞–∂–º–∏—Ç–µ "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"');
    console.log('4. –ö–æ–≥–¥–∞ —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –Ω–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ');
    console.log('5. –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('');
    console.log('‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞...');
    
    await comparator.waitForEnter();
    
    const results = await comparator.comparePeriods('AA1234AA');
    
    console.log('\nüéâ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    return results;
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
module.exports = PeriodComparison;

if (require.main === module) {
    runComparison();
}
