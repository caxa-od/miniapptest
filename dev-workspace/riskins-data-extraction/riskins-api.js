/**
 * –ü–†–û–°–¢–û–ô –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –≠–ö–°–¢–†–ê–ö–¢–û–†–ê RISKINS
 */

const RiskinsExtractorFinal = require('./final-extractor');

class RiskinsAPI {
    constructor(options = {}) {
        this.extractor = new RiskinsExtractorFinal(options);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ
     * @param {string} vehicleNumber - –ù–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ AA1234AA
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
     */
    async getInsuranceQuotes(vehicleNumber) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
        if (!this.isValidVehicleNumber(vehicleNumber)) {
            return {
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç AA1234AA',
                validFormat: 'AA1234AA (2 –±—É–∫–≤—ã + 4 —Ü–∏—Ñ—Ä—ã + 2 –±—É–∫–≤—ã)'
            };
        }

        return await this.extractor.getInsuranceOffers(vehicleNumber);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} number - –ù–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} true –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
     */
    isValidVehicleNumber(number) {
        const pattern = /^[A-Z]{2}\d{4}[A-Z]{2}$/;
        return pattern.test(number);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
     * @param {string} vehicleNumber - –ù–æ–º–µ—Ä –∞–≤—Ç–æ
     * @returns {Promise<Object>} –°–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
     */
    async getCheapestQuote(vehicleNumber) {
        const result = await this.getInsuranceQuotes(vehicleNumber);
        
        if (!result.success || result.offers.length === 0) {
            return result;
        }

        const cheapest = result.offers.reduce((min, offer) => 
            offer.price < min.price ? offer : min
        );

        return {
            success: true,
            vehicleNumber,
            cheapestOffer: cheapest,
            savings: cheapest.oldPrice ? cheapest.oldPrice - cheapest.price : 0,
            totalOffersFound: result.totalOffers
        };
    }

    /**
     * –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
     * @param {string[]} vehicleNumbers - –ú–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤
     * @returns {Promise<Object>} –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω
     */
    async compareQuotes(vehicleNumbers) {
        const results = [];
        
        for (const number of vehicleNumbers) {
            console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ ${number}...`);
            const result = await this.getInsuranceQuotes(number);
            results.push(result);
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 2000));
        }

        return {
            success: true,
            comparison: results,
            summary: this.createComparisonSummary(results)
        };
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     * @private
     */
    createComparisonSummary(results) {
        const successful = results.filter(r => r.success && r.offers.length > 0);
        
        if (successful.length === 0) {
            return { message: '–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è' };
        }

        const allOffers = successful.flatMap(r => 
            r.offers.map(offer => ({ ...offer, vehicleNumber: r.vehicleNumber }))
        );

        const cheapest = allOffers.reduce((min, offer) => 
            offer.price < min.price ? offer : min
        );

        const mostExpensive = allOffers.reduce((max, offer) => 
            offer.price > max.price ? offer : max
        );

        return {
            totalVehiclesProcessed: results.length,
            successfulQuotes: successful.length,
            totalOffersFound: allOffers.length,
            cheapestOverall: {
                vehicleNumber: cheapest.vehicleNumber,
                company: cheapest.companyName,
                price: cheapest.price,
                currency: cheapest.currency
            },
            mostExpensive: {
                vehicleNumber: mostExpensive.vehicleNumber,
                company: mostExpensive.companyName,
                price: mostExpensive.price,
                currency: mostExpensive.currency
            },
            priceRange: {
                min: cheapest.price,
                max: mostExpensive.price,
                difference: mostExpensive.price - cheapest.price
            }
        };
    }
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function examples() {
    console.log('üöÄ –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø RISKINS API\n');
    
    const api = new RiskinsAPI({ headless: true });
    
    // –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    console.log('üìã –ü—Ä–∏–º–µ—Ä 1: –û–¥–Ω–æ –∞–≤—Ç–æ');
    console.log('‚îÄ'.repeat(40));
    const single = await api.getInsuranceQuotes('AA1234AA');
    if (single.success) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${single.totalOffers} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);
        console.log(`üí∞ –¶–µ–Ω—ã: ${single.offers.map(o => o.price + '‚Ç¥').join(', ')}`);
    }
    
    // –ü—Ä–∏–º–µ—Ä 2: –°–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    console.log('\nüí∞ –ü—Ä–∏–º–µ—Ä 2: –°–∞–º–æ–µ –¥–µ—à–µ–≤–æ–µ');
    console.log('‚îÄ'.repeat(40));
    const cheapest = await api.getCheapestQuote('AA1234AA');
    if (cheapest.success) {
        console.log(`üéØ –õ—É—á—à–∞—è —Ü–µ–Ω–∞: ${cheapest.cheapestOffer.price}‚Ç¥`);
        console.log(`üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${cheapest.cheapestOffer.companyName}`);
        if (cheapest.savings > 0) {
            console.log(`üí∏ –≠–∫–æ–Ω–æ–º–∏—è: ${cheapest.savings}‚Ç¥`);
        }
    }
    
    console.log('\nüéâ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

module.exports = RiskinsAPI;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
if (require.main === module) {
    examples();
}
