/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –ü–ï–†–ò–û–î–û–í - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–±–æ—á–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ final-extractor.js
 */

const puppeteer = require('puppeteer');

class FixedPeriodTester {
    constructor() {
        this.baseUrl = 'https://riskins-insurance.eua.in.ua/';
    }

    async testPeriod(vehicleNumber, months) {
        let browser;
        
        try {
            console.log(`\nüîÑ –¢–µ—Å—Ç –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤...`);
            
            browser = await puppeteer.launch({
                headless: false,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');
            await page.setViewport({ width: 1366, height: 768 });

            console.log('  üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
            await page.goto(this.baseUrl, { waitUntil: 'networkidle2' });

            console.log(`  üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä ${vehicleNumber}...`);
            await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await page.click('#autoNumberSearch');
            await page.keyboard.down('Meta');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Meta');
            await page.type('#autoNumberSearch', vehicleNumber);

            console.log(`  üìÖ –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –í—ã–±–µ—Ä–∏—Ç–µ ${months} –º–µ—Å—è—Ü–µ–≤ –≤ –ø–æ–ª–µ "–ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó"`);
            console.log('  üéØ –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"');
            console.log('  ‚è∏Ô∏è  –ü–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ...');

            // –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞ –∫–∞–∫ —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            await page.waitForFunction(() => {
                return new Promise(resolve => {
                    const handler = (e) => {
                        if (e.code === 'Space') {
                            document.removeEventListener('keydown', handler);
                            resolve(true);
                        }
                    };
                    document.addEventListener('keydown', handler);
                });
            }, { timeout: 120000 });

            console.log('  üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');

            // –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–ß–ù–û –¢–ï –ñ–ï –°–ï–õ–ï–ö–¢–û–†–´ —á—Ç–æ –∏ –≤ final-extractor.js
            const offers = await page.evaluate(() => {
                const offers = [];

                // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                const tableRows = document.querySelectorAll('table tr, .Table tr');
                
                tableRows.forEach((row, index) => {
                    const rowText = row.textContent;
                    
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¢–û–ß–ù–û –∫–∞–∫ –≤ final-extractor.js)
                    if (!rowText || rowText.includes('–¶—ñ–Ω–∞') || rowText.includes('–ö–æ–º–ø–∞–Ω—ñ—è')) {
                        return;
                    }

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–¢–û–ß–ù–û –∫–∞–∫ –≤ final-extractor.js)
                    const priceCell = row.querySelector('.Table__cell_price, td[class*="price"], .price');
                    const discountCell = row.querySelector('.Table__discount, .discount');
                    
                    if (priceCell || rowText.includes('–≥—Ä–Ω')) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É (–¢–û–ß–ù–û –∫–∞–∫ –≤ final-extractor.js)
                        let currentPrice = 0;
                        let oldPrice = null;
                        
                        const priceText = priceCell ? priceCell.textContent : rowText;
                        const priceMatch = priceText.match(/(\d{3,5})\s*–≥—Ä–Ω/g);
                        
                        if (priceMatch) {
                            // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã
                            const prices = priceMatch.map(p => parseInt(p.replace(/\D/g, '')));
                            currentPrice = Math.min(...prices); // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è
                            if (prices.length > 1) {
                                oldPrice = Math.max(...prices); // –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è
                            }
                        }

                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∫–∏–¥–∫—É (–¢–û–ß–ù–û –∫–∞–∫ –≤ final-extractor.js)
                        let discount = null;
                        if (discountCell) {
                            const discountMatch = discountCell.textContent.match(/(\d+)%/);
                            if (discountMatch) {
                                discount = parseInt(discountMatch[1]);
                            }
                        }

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–¢–û–ß–ù–û –∫–∞–∫ –≤ final-extractor.js)
                        let companyName = `–ö–æ–º–ø–∞–Ω–∏—è ${offers.length + 1}`;
                        const companyKeywords = {
                            'USG': /USG/i,
                            'ARX': /ARX/i,
                            '–ö–ù–Ø–ñ–ê': /(–ö–ù–Ø–ñ–ê|KNYAZHA)/i,
                            '–ï–¢–ê–õ–û–ù': /(–ï–¢–ê–õ–û–ù|ETALON)/i,
                            '–ö–†–ï–î–û': /(–ö–†–ï–î–û|KREDO)/i,
                            '–û–†–ê–ù–¢–ê': /(–û–†–ê–ù–¢–ê|ORANTA)/i,
                            '–£–ü–°–ö': /–£–ü–°–ö/i,
                            'PZU': /PZU/i,
                            '–£–ù–Ü–ö–ê': /(–£–ù–Ü–ö–ê|UNIKA)/i,
                            '–Ü–ù–ì–û': /(–Ü–ù–ì–û|INGO)/i,
                            '–ü–†–û–í–Ü–î–ù–ê': /(–ü–†–û–í–Ü–î–ù–ê|PROVIDNA)/i,
                            '–ê–õ–¨–§–ê': /(–ê–õ–¨–§–ê|ALFA)/i
                        };

                        for (const [company, pattern] of Object.entries(companyKeywords)) {
                            if (pattern.test(rowText)) {
                                companyName = company;
                                break;
                            }
                        }

                        // –§–∏–ª—å—Ç—Ä —Ä–∞–∑—É–º–Ω—ã—Ö —Ü–µ–Ω (–¢–û–ß–ù–û –∫–∞–∫ –≤ final-extractor.js)
                        if (currentPrice >= 1000 && currentPrice <= 20000) {
                            offers.push({
                                id: `offer_${index}`,
                                companyName,
                                price: currentPrice,
                                oldPrice,
                                discount,
                                currency: '–≥—Ä–Ω',
                                rawText: rowText.substring(0, 100)
                            });
                        }
                    }
                });

                return offers;
            });

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            const selectedPeriod = await page.evaluate(() => {
                const selects = document.querySelectorAll('select');
                for (const select of selects) {
                    const selectedOption = select.options[select.selectedIndex];
                    if (selectedOption && selectedOption.text.includes('–º—ñ—Å—è—Ü')) {
                        return selectedOption.text.trim();
                    }
                }
                return '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
            });

            const result = {
                success: true,
                period: months,
                selectedPeriod,
                vehicleNumber,
                offers,
                totalOffers: offers.length,
                timestamp: new Date().toISOString()
            };

            console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤`);
            console.log(`  üìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: ${selectedPeriod}`);
            
            if (offers.length > 0) {
                console.log(`  üí∞ –¶–µ–Ω—ã: ${offers.map(o => o.price + '‚Ç¥').join(', ')}`);
                const avgPrice = Math.round(offers.reduce((sum, o) => sum + o.price, 0) / offers.length);
                console.log(`  üìä –°—Ä–µ–¥–Ω—è—è: ${avgPrice}‚Ç¥`);
            }

            return result;

        } catch (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤:`, error.message);
            return {
                success: false,
                period: months,
                error: error.message,
                timestamp: new Date().toISOString()
            };
        } finally {
            if (browser) {
                await browser.close();
            }
        }
    }

    async compareAllPeriods(vehicleNumber = 'AA1234AA') {
        console.log('üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ò–û–î–û–í');
        console.log('=' .repeat(50));
        console.log('‚ú® –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–±–æ—á–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ final-extractor.js');
        console.log('');

        const periods = [6, 12];
        const results = [];

        for (const months of periods) {
            const result = await this.testPeriod(vehicleNumber, months);
            results.push(result);
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        console.log('\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
        console.log('=' .repeat(50));

        results.forEach(result => {
            if (result.success) {
                console.log(`\nüìÖ ${result.period} –º–µ—Å—è—Ü–µ–≤ (${result.selectedPeriod}):`);
                console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${result.totalOffers} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);
                if (result.offers.length > 0) {
                    const prices = result.offers.map(o => o.price).sort((a, b) => a - b);
                    console.log(`   üí∞ –¶–µ–Ω—ã: ${prices.join('‚Ç¥, ')}‚Ç¥`);
                    console.log(`   üìà –î–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...prices)}‚Ç¥ - ${Math.max(...prices)}‚Ç¥`);
                }
            } else {
                console.log(`\n‚ùå ${result.period} –º–µ—Å—è—Ü–µ–≤: ${result.error}`);
            }
        });

        const successful = results.filter(r => r.success && r.offers.length > 0);
        if (successful.length >= 2) {
            console.log('\nüéØ –í–´–í–û–î–´:');
            const [result6, result12] = successful;
            
            const avg6 = result6.offers.reduce((sum, o) => sum + o.price, 0) / result6.offers.length;
            const avg12 = result12.offers.reduce((sum, o) => sum + o.price, 0) / result12.offers.length;
            
            console.log(`   üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ 6 –º–µ—Å: ${Math.round(avg6)}‚Ç¥`);
            console.log(`   üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ 12 –º–µ—Å: ${Math.round(avg12)}‚Ç¥`);
            console.log(`   üìà –†–∞–∑–Ω–∏—Ü–∞: ${Math.round(Math.abs(avg12 - avg6))}‚Ç¥`);
            
            if (Math.abs(avg12 - avg6) < 50) {
                console.log('   üí° –ü–µ—Ä–∏–æ–¥—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã');
            } else {
                console.log('   üìä –ü–µ—Ä–∏–æ–¥—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ');
            }
        }

        return results;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const tester = new FixedPeriodTester();
    tester.compareAllPeriods('AA1234AA')
        .then(() => {
            console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            process.exit(1);
        });
}

module.exports = FixedPeriodTester;
