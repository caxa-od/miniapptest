/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HEADLESS VS –í–ò–î–ò–ú–´–ô –†–ï–ñ–ò–ú
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞
 */

const puppeteer = require('puppeteer');

async function compareHeadlessVsVisible(plateNumber, months) {
    console.log(`üîç –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í –ë–†–ê–£–ó–ï–†–ê`);
    console.log(`–ù–æ–º–µ—Ä: ${plateNumber}, –ü–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤`);
    console.log('=' .repeat(60));

    const results = {};

    // –¢–µ—Å—Ç –≤ –í–ò–î–ò–ú–û–ú —Ä–µ–∂–∏–º–µ
    console.log('\nüëÅÔ∏è –¢–ï–°–¢ –í –í–ò–î–ò–ú–û–ú –†–ï–ñ–ò–ú–ï:');
    console.log('-' .repeat(30));
    results.visible = await testMode(plateNumber, months, false);

    await new Promise(resolve => setTimeout(resolve, 3000));

    // –¢–µ—Å—Ç –≤ –°–ö–†–´–¢–û–ú —Ä–µ–∂–∏–º–µ
    console.log('\nüï∂Ô∏è –¢–ï–°–¢ –í –°–ö–†–´–¢–û–ú –†–ï–ñ–ò–ú–ï:');
    console.log('-' .repeat(30));
    results.headless = await testMode(plateNumber, months, true);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log('=' .repeat(40));
    console.log(`–í–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º: ${results.visible.offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);
    console.log(`–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º: ${results.headless.offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

    if (results.visible.offers.length !== results.headless.offers.length) {
        console.log('\n‚ö†Ô∏è –†–ê–ó–õ–ò–ß–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–´!');
        console.log('\n–í–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º –Ω–∞—Ö–æ–¥–∏—Ç:');
        results.visible.offers.forEach((offer, i) => {
            console.log(`   ${i+1}. ${offer.price}`);
        });
        
        console.log('\n–°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –Ω–∞—Ö–æ–¥–∏—Ç:');
        results.headless.offers.forEach((offer, i) => {
            console.log(`   ${i+1}. ${offer.price}`);
        });

        console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
        console.log(`–í–∏–¥–∏–º—ã–π: —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ = ${results.visible.diagnostics.priceElements}`);
        console.log(`–°–∫—Ä—ã—Ç—ã–π: —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ = ${results.headless.diagnostics.priceElements}`);
        console.log(`–í–∏–¥–∏–º—ã–π: –≤—Å–µ–≥–æ .Table__cell = ${results.visible.diagnostics.tableCells}`);
        console.log(`–°–∫—Ä—ã—Ç—ã–π: –≤—Å–µ–≥–æ .Table__cell = ${results.headless.diagnostics.tableCells}`);
    } else {
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö');
    }

    return results;
}

async function testMode(plateNumber, months, headless) {
    let browser;
    try {
        browser = await puppeteer.launch({
            headless: headless,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();
        await page.setViewport({ width: 1366, height: 768 });

        console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.keyboard.down('Meta');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Meta');
        await page.type('#autoNumberSearch', plateNumber);

        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥
        if (months !== 12) {
            console.log(`üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤...`);
            await page.waitForSelector('#coverageTime', { timeout: 10000 });
            await page.click('#coverageTime');
            await page.waitForTimeout(500);
            
            const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
            const labels = await page.$$('#coverageTime .Select__option');
            
            for (const label of labels) {
                const text = await label.evaluate(el => el.textContent.trim());
                if (text === targetText) {
                    await label.click();
                    await page.waitForTimeout(1000);
                    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${targetText}`);
                    break;
                }
            }
        } else {
            console.log('üïí –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (12 –º–µ—Å—è—Ü–µ–≤)');
        }

        console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
        await page.click('#btnCalculateNumber');

        console.log('‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
        await page.waitForSelector('.Table__cell', { timeout: 45000 });
        
        // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        console.log('‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
        await page.waitForTimeout(5000);

        // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        const analysis = await page.evaluate(() => {
            const diagnostics = {
                tableCells: document.querySelectorAll('.Table__cell').length,
                tableRows: document.querySelectorAll('.Table__row').length,
                priceElements: 0,
                allPriceTexts: [],
                uniquePrices: new Set()
            };

            // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
            const allElements = document.querySelectorAll('*');
            allElements.forEach(el => {
                const text = el.textContent?.trim() || '';
                if (text.match(/^\d{4,5}\s*–≥—Ä–Ω$/)) {
                    diagnostics.priceElements++;
                    diagnostics.allPriceTexts.push({
                        text: text,
                        tag: el.tagName,
                        className: el.className,
                        id: el.id,
                        parent: el.parentElement?.tagName
                    });
                    
                    const price = text.replace(/\s*–≥—Ä–Ω$/, '');
                    diagnostics.uniquePrices.add(price);
                }
            });

            // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const offers = [];
            Array.from(diagnostics.uniquePrices).forEach((price, index) => {
                offers.push({
                    company: `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${index + 1}`,
                    price: price + '‚Ç¥',
                    index: index + 1
                });
            });

            return {
                offers: offers,
                diagnostics: {
                    ...diagnostics,
                    uniquePrices: Array.from(diagnostics.uniquePrices)
                }
            };
        });

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${analysis.offers.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω`);
        console.log(`üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: .Table__cell=${analysis.diagnostics.tableCells}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏=${analysis.diagnostics.priceElements}`);
        
        analysis.offers.forEach(offer => {
            console.log(`   ${offer.index}. ${offer.price}`);
        });

        return analysis;

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ ${headless ? 'headless' : 'visible'}: ${error.message}`);
        return {
            offers: [],
            diagnostics: { error: error.message }
        };
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
if (require.main === module) {
    const plateNumber = process.argv[2] || 'AA1111AA';
    const months = parseInt(process.argv[3]) || 6;
    
    compareHeadlessVsVisible(plateNumber, months)
        .then(results => {
            console.log('\nüéâ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            const fs = require('fs');
            const filename = `mode_comparison_${plateNumber}_${months}m_${Date.now()}.json`;
            fs.writeFileSync(filename, JSON.stringify(results, null, 2));
            console.log(`üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: ${filename}`);
            
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { compareHeadlessVsVisible };
