/**
 * –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–¢–†–£–ö–¢–£–†–´ –¶–ï–ù
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ–ª–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ü–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π
 */

const puppeteer = require('puppeteer');

async function analyzePriceStructure(plateNumber) {
    console.log(`üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¶–ï–ù –î–õ–Ø ${plateNumber}`);
    console.log('=' .repeat(50));

    let browser;
    try {
        browser = await puppeteer.launch({
            headless: false, // –í–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();
        await page.setViewport({ width: 1366, height: 768 });

        console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.keyboard.down('Meta');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Meta');
        await page.type('#autoNumberSearch', plateNumber);

        console.log('üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ 6 –º–µ—Å—è—Ü–µ–≤...');
        await page.waitForSelector('#coverageTime', { timeout: 10000 });
        await page.click('#coverageTime');
        await page.waitForTimeout(500);
        
        const labels = await page.$$('#coverageTime .Select__option');
        for (const label of labels) {
            const text = await label.evaluate(el => el.textContent.trim());
            if (text === '6 –º—ñ—Å—è—Ü—ñ–≤') {
                await label.click();
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: 6 –º–µ—Å—è—Ü–µ–≤');
                break;
            }
        }

        console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
        await page.click('#btnCalculateNumber');

        console.log('‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
        await page.waitForSelector('.Table__cell', { timeout: 45000 });
        await page.waitForTimeout(5000);

        console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–µ–Ω...');
        const priceAnalysis = await page.evaluate(() => {
            const analysis = {
                tableRows: [],
                allPriceElements: [],
                discountElements: [],
                cellStructure: []
            };

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            const rows = document.querySelectorAll('.Table__row');
            rows.forEach((row, rowIndex) => {
                const rowData = {
                    rowIndex: rowIndex,
                    cells: [],
                    allText: row.textContent.trim()
                };

                const cells = row.querySelectorAll('.Table__cell');
                cells.forEach((cell, cellIndex) => {
                    const cellData = {
                        cellIndex: cellIndex,
                        text: cell.textContent.trim(),
                        className: cell.className,
                        innerHTML: cell.innerHTML,
                        hasDiscount: cell.querySelector('.Table__discount') !== null,
                        discountInfo: null
                    };

                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∏–¥–∫–∏
                    const discountEl = cell.querySelector('.Table__discount');
                    if (discountEl) {
                        cellData.discountInfo = {
                            discountText: discountEl.textContent.trim(),
                            spans: Array.from(discountEl.querySelectorAll('span')).map(span => span.textContent.trim())
                        };
                    }

                    rowData.cells.push(cellData);
                });

                analysis.tableRows.push(rowData);
            });

            // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
            const allElements = document.querySelectorAll('*');
            allElements.forEach(el => {
                const text = el.textContent?.trim() || '';
                
                // –ò—â–µ–º —Ü–µ–Ω—ã –≤ –≥—Ä–∏–≤–Ω–∞—Ö
                if (text.match(/\d+\s*–≥—Ä–Ω/) && text.length < 100) {
                    analysis.allPriceElements.push({
                        tag: el.tagName,
                        className: el.className,
                        text: text,
                        parent: el.parentElement?.className || '',
                        hasPercent: text.includes('%')
                    });
                }

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
                if (text.includes('%') && text.match(/\d+%/) && text.length < 50) {
                    analysis.discountElements.push({
                        tag: el.tagName,
                        className: el.className,
                        text: text,
                        parent: el.parentElement?.className || ''
                    });
                }
            });

            return analysis;
        });

        console.log('\nüìã –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´:');
        console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: ${priceAnalysis.tableRows.length}`);
        console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: ${priceAnalysis.allPriceElements.length}`);
        console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏: ${priceAnalysis.discountElements.length}`);

        console.log('\nüí∞ –°–¢–†–£–ö–¢–£–†–ê –°–¢–†–û–ö –¢–ê–ë–õ–ò–¶–´:');
        priceAnalysis.tableRows.forEach((row, i) => {
            if (row.cells.length > 0) {
                console.log(`\n–°—Ç—Ä–æ–∫–∞ ${i + 1}:`);
                row.cells.forEach((cell, j) => {
                    if (cell.text.includes('–≥—Ä–Ω') || cell.hasDiscount) {
                        console.log(`   –Ø—á–µ–π–∫–∞ ${j + 1} (${cell.className}):`);
                        console.log(`     –¢–µ–∫—Å—Ç: "${cell.text}"`);
                        if (cell.discountInfo) {
                            console.log(`     –°–∫–∏–¥–∫–∞: "${cell.discountInfo.discountText}"`);
                            console.log(`     Spans: [${cell.discountInfo.spans.join(', ')}]`);
                        }
                    }
                });
            }
        });

        console.log('\nüè∑Ô∏è –≠–õ–ï–ú–ï–ù–¢–´ –°–û –°–ö–ò–î–ö–ê–ú–ò:');
        priceAnalysis.discountElements.forEach((el, i) => {
            console.log(`${i + 1}. ${el.className}: "${el.text}"`);
        });

        console.log('\n‚è±Ô∏è –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...');
        await page.waitForTimeout(10000);

        return priceAnalysis;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        return null;
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if (require.main === module) {
    const plateNumber = process.argv[2] || 'AA1111AA';
    
    analyzePriceStructure(plateNumber)
        .then(result => {
            console.log('\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!');
            if (result) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const fs = require('fs');
                const filename = `price_structure_${plateNumber.replace(/[^A-Z0-9]/g, '')}.json`;
                fs.writeFileSync(filename, JSON.stringify(result, null, 2));
                console.log(`üíæ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${filename}`);
            }
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { analyzePriceStructure };
