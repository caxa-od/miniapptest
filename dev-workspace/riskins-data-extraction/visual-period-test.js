/**
 * –í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ï–õ–ï–ö–¢–û–†–ê –ü–ï–†–ò–û–î–ê
 * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—è "–ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó"
 */

const puppeteer = require('puppeteer');

async function visualPeriodTest() {
    console.log('üëÄ –í–ò–ó–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ï–õ–ï–ö–¢–û–†–ê –ü–ï–†–ò–û–î–ê');
    console.log('‚ïê'.repeat(50));

    const browser = await puppeteer.launch({
        headless: false, // –í–ò–ó–£–ê–õ–¨–ù–´–ô —Ä–µ–∂–∏–º
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
        defaultViewport: null
    });

    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');

    try {
        console.log('üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { 
            waitUntil: 'networkidle2' 
        });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.type('#autoNumberSearch', 'AA1234AA');

        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ –ø–µ—Ä–∏–æ–¥–∞...');
        
        // –ñ–¥–µ–º —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        await page.waitForTimeout(2000);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
        const formAnalysis = await page.evaluate(() => {
            const results = {
                selectElements: [],
                inputElements: [],
                periodRelatedElements: [],
                allFormElements: []
            };

            // –ò—â–µ–º –≤—Å–µ select —ç–ª–µ–º–µ–Ω—Ç—ã
            const selects = document.querySelectorAll('select');
            selects.forEach((select, i) => {
                const options = Array.from(select.options).map(opt => ({
                    value: opt.value,
                    text: opt.textContent.trim(),
                    selected: opt.selected
                }));
                
                results.selectElements.push({
                    index: i,
                    id: select.id || `select-${i}`,
                    name: select.name || '',
                    className: select.className,
                    options: options,
                    selectedValue: select.value,
                    visible: select.offsetParent !== null,
                    outerHTML: select.outerHTML.substring(0, 300)
                });
            });

            // –ò—â–µ–º –≤—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã
            const inputs = document.querySelectorAll('input');
            inputs.forEach((input, i) => {
                if (input.type !== 'text' && input.type !== 'hidden') {
                    const label = input.closest('label') || 
                                document.querySelector(`label[for="${input.id}"]`);
                    
                    results.inputElements.push({
                        index: i,
                        type: input.type,
                        id: input.id || `input-${i}`,
                        name: input.name || '',
                        value: input.value,
                        checked: input.checked,
                        labelText: label ? label.textContent.trim() : '',
                        visible: input.offsetParent !== null
                    });
                }
            });

            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–∏–æ–¥–æ–º
            const allElements = document.querySelectorAll('*');
            allElements.forEach(el => {
                const text = el.textContent.toLowerCase();
                if ((text.includes('–ø–µ—Ä—ñ–æ–¥') || text.includes('–º—ñ—Å—è—Ü') || 
                     text.includes('—Ç–µ—Ä–º') || text.includes('—Å—Ä–æ–∫')) && 
                    el.children.length <= 2 && text.length < 200) {
                    
                    results.periodRelatedElements.push({
                        tagName: el.tagName,
                        id: el.id || '',
                        className: el.className,
                        text: el.textContent.trim().substring(0, 100),
                        visible: el.offsetParent !== null,
                        clickable: el.onclick !== null || el.addEventListener !== undefined
                    });
                }
            });

            // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
            const formElements = document.querySelectorAll('form *');
            let formCount = 0;
            formElements.forEach(el => {
                if (formCount < 20 && (el.tagName === 'SELECT' || el.tagName === 'INPUT' || 
                    el.tagName === 'BUTTON' || el.tagName === 'TEXTAREA')) {
                    results.allFormElements.push({
                        tagName: el.tagName,
                        type: el.type || '',
                        id: el.id || '',
                        name: el.name || '',
                        className: el.className,
                        value: el.value || '',
                        text: el.textContent ? el.textContent.trim().substring(0, 50) : '',
                        visible: el.offsetParent !== null
                    });
                    formCount++;
                }
            });

            return results;
        });

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
        console.log('‚ïê'.repeat(50));

        // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ select —ç–ª–µ–º–µ–Ω—Ç—ã
        if (formAnalysis.selectElements.length > 0) {
            console.log('\nüéõÔ∏è SELECT –≠–õ–ï–ú–ï–ù–¢–´:');
            formAnalysis.selectElements.forEach((sel, i) => {
                console.log(`\n${i + 1}. ${sel.id} (${sel.visible ? '–≤–∏–¥–∏–º—ã–π' : '—Å–∫—Ä—ã—Ç—ã–π'})`);
                console.log(`   –ö–ª–∞—Å—Å: ${sel.className}`);
                console.log(`   –ò–º—è: ${sel.name}`);
                console.log(`   –í—ã–±—Ä–∞–Ω–æ: ${sel.selectedValue}`);
                console.log(`   –û–ø—Ü–∏–∏:`);
                sel.options.forEach((opt, j) => {
                    const mark = opt.selected ? ' ‚úì' : '  ';
                    console.log(`    ${mark} "${opt.text}" (${opt.value})`);
                });
            });
        } else {
            console.log('\n‚ùå SELECT —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        // –í—ã–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–∏–æ–¥–æ–º
        if (formAnalysis.periodRelatedElements.length > 0) {
            console.log('\nüìÖ –≠–õ–ï–ú–ï–ù–¢–´ –° "–ü–ï–†–Ü–û–î":');
            formAnalysis.periodRelatedElements.forEach((el, i) => {
                console.log(`\n${i + 1}. ${el.tagName} (${el.visible ? '–≤–∏–¥–∏–º—ã–π' : '—Å–∫—Ä—ã—Ç—ã–π'})`);
                console.log(`   ID: ${el.id}`);
                console.log(`   –ö–ª–∞—Å—Å: ${el.className}`);
                console.log(`   –¢–µ–∫—Å—Ç: "${el.text}"`);
            });
        }

        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
        if (formAnalysis.allFormElements.length > 0) {
            console.log('\nüìã –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –§–û–†–ú–´:');
            formAnalysis.allFormElements.forEach((el, i) => {
                if (el.visible) {
                    console.log(`${i + 1}. ${el.tagName}${el.type ? `[${el.type}]` : ''} #${el.id} "${el.text}"`);
                }
            });
        }

        console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('‚îÄ'.repeat(40));
        if (formAnalysis.selectElements.length > 0) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã select —ç–ª–µ–º–µ–Ω—Ç—ã - –∏–∑—É—á–∏—Ç–µ –∏—Ö –æ–ø—Ü–∏–∏');
            console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ DevTools');
        } else {
            console.log('‚ùå Select —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–∏–æ–¥ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É');
        }

        console.log('\nüîç –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...');
        console.log('‚è∏Ô∏è  –ó–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ');

        // –ü–∞—É–∑–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        await page.waitForTimeout(60000);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await browser.close();
    }
}

visualPeriodTest();
