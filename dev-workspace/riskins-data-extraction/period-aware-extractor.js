/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô –≠–ö–°–¢–†–ê–ö–¢–û–† –° –í–´–ë–û–†–û–ú –ü–ï–†–ò–û–î–ê –°–¢–†–ê–•–û–í–ê–ù–ò–Ø
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª–µ "–ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó"
 */

const puppeteer = require('puppeteer');

class PeriodAwareExtractor {
    constructor(options = {}) {
        this.baseUrl = 'https://riskins-insurance.eua.in.ua/';
        this.options = {
            headless: true,
            timeout: 30000,
            ...options
        };
    }

    async getInsuranceQuotes(vehicleNumber, periodMonths = 12) {
        let browser;
        try {
            browser = await puppeteer.launch({
                headless: this.options.headless,
                args: ['--no-sandbox', '--disable-setuid-sandbox'],
                defaultViewport: null
            });

            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');

            console.log('üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º Riskins Insurance...');
            await page.goto(this.baseUrl, { waitUntil: 'networkidle2' });

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä:', vehicleNumber);
            await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await page.click('#autoNumberSearch');
            await page.keyboard.down('Meta');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Meta');
            await page.type('#autoNumberSearch', vehicleNumber);

            console.log(`üìÖ –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${periodMonths} –º–µ—Å—è—Ü–µ–≤`);
            await this.selectPeriod(page, periodMonths);

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
            const submitButton = await page.$('#btnCalculateNumber');
            if (!submitButton) {
                throw new Error('–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            await submitButton.click();

            console.log('‚è±Ô∏è  –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            await page.waitForTimeout(15000);

            console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            const offers = await this.extractOffers(page);

            return {
                success: true,
                vehicleNumber,
                periodMonths,
                offers,
                totalOffers: offers.length,
                timestamp: new Date().toISOString(),
                source: 'Riskins Insurance Ukraine'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
            return {
                success: false,
                vehicleNumber,
                periodMonths,
                error: error.message,
                timestamp: new Date().toISOString()
            };
        } finally {
            if (browser) {
                await browser.close();
            }
        }
    }

    async selectPeriod(page, months) {
        try {
            // –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è –ø–µ—Ä–∏–æ–¥–∞
            const periodSelectors = [
                'select[name*="period"]',
                'select[name*="Period"]',
                'select[name*="–ø–µ—Ä—ñ–æ–¥"]',
                'select[name*="–º–µ—Å—è—Ü"]',
                'select[name*="–º—ñ—Å—è—Ü"]',
                '#period',
                '#insurancePeriod',
                '[id*="period"]',
                '[name*="period"]',
                '.Select select',
                'select'
            ];

            let periodSelected = false;

            for (const selector of periodSelectors) {
                try {
                    const selectElement = await page.$(selector);
                    if (selectElement) {
                        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏
                        const options = await page.evaluate((sel) => {
                            const element = document.querySelector(sel);
                            if (!element) return [];
                            return Array.from(element.options).map(opt => ({
                                value: opt.value,
                                text: opt.textContent.trim()
                            }));
                        }, selector);

                        console.log(`üéõÔ∏è  –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç: ${selector}`);
                        console.log(`üìã –û–ø—Ü–∏–∏: ${options.map(o => `"${o.text}"`).join(', ')}`);

                        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–ø—Ü–∏—é –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                        const targetOption = this.findPeriodOption(options, months);
                        
                        if (targetOption) {
                            await page.select(selector, targetOption.value);
                            console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: "${targetOption.text}" (${months} –º–µ—Å)`);
                            periodSelected = true;
                            break;
                        }
                    }
                } catch (e) {
                    continue;
                }
            }

            if (!periodSelected) {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
                console.log('üîç –ò—â–µ–º –ø–µ—Ä–∏–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç...');
                const periodTexts = [
                    `${months} –º—ñ—Å—è—Ü—ñ–≤`,
                    `${months} –º–µ—Å—è—Ü–µ–≤`,
                    `${months} –º–µ—Å`,
                    months.toString()
                ];

                for (const text of periodTexts) {
                    try {
                        const xpath = `//*[contains(text(), '${text}')]`;
                        const elements = await page.$x(xpath);
                        if (elements.length > 0) {
                            await elements[0].click();
                            console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç: "${text}"`);
                            periodSelected = true;
                            break;
                        }
                    } catch (e) {
                        continue;
                    }
                }
            }

            if (!periodSelected) {
                console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }

        } catch (error) {
            console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞:', error.message);
        }
    }

    findPeriodOption(options, targetMonths) {
        // –ò—â–µ–º –æ–ø—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
        for (const option of options) {
            const text = option.text.toLowerCase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if (text.includes(`${targetMonths} –º—ñ—Å—è—Ü`) || 
                text.includes(`${targetMonths} –º–µ—Å—è—Ü`) ||
                text.includes(`${targetMonths} –º–µ—Å`)) {
                return option;
            }
            
            // –î–ª—è 6 –º–µ—Å—è—Ü–µ–≤ –∏—â–µ–º —Ç–∞–∫–∂–µ "–ø—ñ–≤—Ä–æ–∫—É"
            if (targetMonths === 6 && (text.includes('–ø—ñ–≤—Ä–æ–∫—É') || text.includes('–ø–æ–ª–≥–æ–¥–∞'))) {
                return option;
            }
            
            // –î–ª—è 12 –º–µ—Å—è—Ü–µ–≤ –∏—â–µ–º —Ç–∞–∫–∂–µ "—Ä—ñ–∫", "–≥–æ–¥"
            if (targetMonths === 12 && (text.includes('—Ä—ñ–∫') || text.includes('–≥–æ–¥') || text.includes('year'))) {
                return option;
            }
        }
        
        return null;
    }

    async extractOffers(page) {
        return await page.evaluate(() => {
            const offers = [];
            const tableRows = document.querySelectorAll('table tr, .Table tr');
            
            tableRows.forEach((row, index) => {
                const rowText = row.textContent;
                
                if (!rowText || rowText.includes('–¶—ñ–Ω–∞') || rowText.includes('–ö–æ–º–ø–∞–Ω—ñ—è')) {
                    return;
                }

                const priceCell = row.querySelector('.Table__cell_price, td[class*="price"], .price');
                
                if (priceCell || rowText.includes('–≥—Ä–Ω')) {
                    let currentPrice = 0;
                    let oldPrice = null;
                    
                    const priceText = priceCell ? priceCell.textContent : rowText;
                    const priceMatch = priceText.match(/(\d{3,5})\s*–≥—Ä–Ω/g);
                    
                    if (priceMatch) {
                        const prices = priceMatch.map(p => parseInt(p.replace(/\D/g, '')));
                        currentPrice = Math.min(...prices);
                        if (prices.length > 1) {
                            oldPrice = Math.max(...prices);
                        }
                    }

                    let discount = null;
                    const discountMatch = rowText.match(/(\d+)%/);
                    if (discountMatch) {
                        discount = parseInt(discountMatch[1]);
                    }

                    let companyName = `–ö–æ–º–ø–∞–Ω–∏—è ${offers.length + 1}`;
                    const companyPatterns = {
                        'USG': /USG/i,
                        'ARX': /ARX/i,
                        '–ö–ù–Ø–ñ–ê': /–ö–ù–Ø–ñ–ê/i,
                        '–ï–¢–ê–õ–û–ù': /–ï–¢–ê–õ–û–ù/i,
                        '–ö–†–ï–î–û': /–ö–†–ï–î–û/i,
                        '–û–†–ê–ù–¢–ê': /–û–†–ê–ù–¢–ê/i,
                        '–£–ü–°–ö': /–£–ü–°–ö/i,
                        'PZU': /PZU/i,
                        '–£–ù–Ü–ö–ê': /–£–ù–Ü–ö–ê/i,
                        '–Ü–ù–ì–û': /–Ü–ù–ì–û/i
                    };

                    for (const [company, pattern] of Object.entries(companyPatterns)) {
                        if (pattern.test(rowText)) {
                            companyName = company;
                            break;
                        }
                    }

                    if (currentPrice > 0) {
                        offers.push({
                            id: `riskins_${Date.now()}_${index}`,
                            companyName,
                            price: currentPrice,
                            oldPrice,
                            discount,
                            currency: '–≥—Ä–Ω',
                            status: '–î–æ—Å—Ç—É–ø–Ω–æ',
                            source: 'Riskins Insurance'
                        });
                    }
                }
            });

            return offers;
        });
    }

    async comparePeriods(vehicleNumber, periods = [6, 12]) {
        console.log(`üîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ò–û–î–û–í –¥–ª—è ${vehicleNumber}`);
        console.log('‚ïê'.repeat(50));
        
        const results = [];
        
        for (const period of periods) {
            console.log(`\nüìÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${period} –º–µ—Å—è—Ü–µ–≤...`);
            const result = await this.getInsuranceQuotes(vehicleNumber, period);
            results.push(result);
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
        return this.analyzeComparison(results);
    }

    analyzeComparison(results) {
        const successful = results.filter(r => r.success && r.offers.length > 0);
        
        if (successful.length < 2) {
            return {
                success: false,
                message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è',
                results
            };
        }

        const analysis = {
            success: true,
            vehicleNumber: results[0].vehicleNumber,
            comparison: successful.map(result => ({
                period: result.periodMonths,
                totalOffers: result.totalOffers,
                minPrice: Math.min(...result.offers.map(o => o.price)),
                maxPrice: Math.max(...result.offers.map(o => o.price)),
                avgPrice: Math.round(result.offers.reduce((sum, o) => sum + o.price, 0) / result.offers.length),
                offers: result.offers
            })),
            results
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è 6 –∏ 12 –º–µ—Å—è—Ü–µ–≤
        const period6 = analysis.comparison.find(c => c.period === 6);
        const period12 = analysis.comparison.find(c => c.period === 12);
        
        if (period6 && period12) {
            analysis.detailed = {
                priceDifference: {
                    min: period12.minPrice - period6.minPrice,
                    max: period12.maxPrice - period6.maxPrice,
                    avg: period12.avgPrice - period6.avgPrice
                },
                percentDifference: {
                    min: Math.round(((period12.minPrice - period6.minPrice) / period6.minPrice) * 100),
                    avg: Math.round(((period12.avgPrice - period6.avgPrice) / period6.avgPrice) * 100)
                }
            };
        }

        return analysis;
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async function testPeriodExtractor() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ö–°–¢–†–ê–ö–¢–û–†–ê –° –í–´–ë–û–†–û–ú –ü–ï–†–ò–û–î–ê\n');
    
    const extractor = new PeriodAwareExtractor({ headless: true });
    
    const vehicleNumber = 'AA1234AA';
    
    // –¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
    console.log('üìä –¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ 6 –∏ 12 –º–µ—Å—è—Ü–µ–≤');
    console.log('‚îÄ'.repeat(50));
    
    const comparison = await extractor.comparePeriods(vehicleNumber, [6, 12]);
    
    if (comparison.success) {
        console.log('\nüí∞ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø:');
        comparison.comparison.forEach(period => {
            console.log(`\n${period.period} –º–µ—Å—è—Ü–µ–≤:`);
            console.log(`  üì¶ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${period.totalOffers}`);
            console.log(`  üí∞ –¶–µ–Ω—ã: ${period.minPrice}‚Ç¥ - ${period.maxPrice}‚Ç¥`);
            console.log(`  üìä –°—Ä–µ–¥–Ω—è—è: ${period.avgPrice}‚Ç¥`);
        });
        
        if (comparison.detailed) {
            console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:');
            console.log(`  –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ: ${comparison.detailed.priceDifference.min}‚Ç¥ (${comparison.detailed.percentDifference.min}%)`);
            console.log(`  –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ: ${comparison.detailed.priceDifference.avg}‚Ç¥ (${comparison.detailed.percentDifference.avg}%)`);
        }
    } else {
        console.log('‚ùå –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', comparison.message);
    }
    
    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
}

module.exports = PeriodAwareExtractor;

if (require.main === module) {
    testPeriodExtractor();
}
