/**
 * –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –°–ï–õ–ï–ö–¢–û–†–û–í –ü–ï–†–ò–û–î–ê –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò
 */

const puppeteer = require('puppeteer');

async function investigatePeriodSelectors() {
    console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –°–ï–õ–ï–ö–¢–û–†–û–í –ü–ï–†–ò–û–î–ê');
    console.log('=' .repeat(50));
    
    let browser;
    try {
        browser = await puppeteer.launch({
            headless: false, // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();
        await page.setViewport({ width: 1366, height: 768 });

        console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.keyboard.down('Meta');
        await page.keyboard.press('KeyA');
        await page.keyboard.up('Meta');
        await page.type('#autoNumberSearch', 'AA1111AA');

        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã...');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ select —ç–ª–µ–º–µ–Ω—Ç—ã
        const selectAnalysis = await page.evaluate(() => {
            const results = [];
            const selects = document.querySelectorAll('select');
            
            selects.forEach((select, index) => {
                const options = Array.from(select.options).map(option => ({
                    value: option.value,
                    text: option.text.trim(),
                    selected: option.selected
                }));
                
                results.push({
                    index,
                    id: select.id,
                    name: select.name,
                    className: select.className,
                    optionsCount: options.length,
                    options: options,
                    hasMonthOptions: options.some(opt => 
                        opt.text.includes('–º—ñ—Å—è—Ü') || 
                        opt.text.includes('month') ||
                        opt.text.includes('6') || 
                        opt.text.includes('12')
                    )
                });
            });
            
            return results;
        });

        console.log('\nüìä –ù–ê–ô–î–ï–ù–ù–´–ï SELECT –≠–õ–ï–ú–ï–ù–¢–´:');
        selectAnalysis.forEach(select => {
            console.log(`\nSelect #${select.index}:`);
            console.log(`  ID: "${select.id}"`);
            console.log(`  Name: "${select.name}"`);
            console.log(`  Class: "${select.className}"`);
            console.log(`  –û–ø—Ü–∏–π: ${select.optionsCount}`);
            console.log(`  –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Å—è—Ü—ã: ${select.hasMonthOptions ? '–î–ê' : '–ù–ï–¢'}`);
            
            if (select.hasMonthOptions) {
                console.log('  üéØ –û–ü–¶–ò–ò –ü–ï–†–ò–û–î–ê:');
                select.options.forEach((option, i) => {
                    const marker = option.selected ? 'üëâ' : '  ';
                    console.log(`    ${marker} "${option.text}" (value: "${option.value}")`);
                });
            }
        });

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
        const otherElements = await page.evaluate(() => {
            const results = [];
            
            // –ò—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É "–ø–µ—Ä—ñ–æ–¥"
            const allElements = document.querySelectorAll('*');
            allElements.forEach(el => {
                const text = el.textContent?.toLowerCase() || '';
                if (text.includes('–ø–µ—Ä—ñ–æ–¥') || text.includes('period')) {
                    results.push({
                        tag: el.tagName,
                        id: el.id,
                        className: el.className,
                        text: el.textContent?.trim().substring(0, 100)
                    });
                }
            });
            
            return results;
        });

        console.log('\nüîé –≠–õ–ï–ú–ï–ù–¢–´ –°–û–î–ï–†–ñ–ê–©–ò–ï "–ü–ï–†–Ü–û–î":');
        otherElements.forEach((el, i) => {
            console.log(`  ${i+1}. <${el.tag}> id="${el.id}" class="${el.className}"`);
            console.log(`     –¢–µ–∫—Å—Ç: "${el.text}"`);
        });

        console.log('\n‚è∏Ô∏è –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
        console.log('üí° –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ DevTools');
        console.log('üîç –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑...');

        // –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è Enter
        await new Promise(resolve => {
            process.stdin.once('data', () => resolve());
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    investigatePeriodSelectors()
        .then(() => {
            console.log('\nüéâ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error);
            process.exit(1);
        });
}

module.exports = { investigatePeriodSelectors };
