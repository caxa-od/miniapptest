/**
 * –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ –ü–ï–†–ò–û–î–û–í - –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–Ø ENTER
 * –ü—Ä–æ—Å—Ç–æ –∂–¥–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
 */

const puppeteer = require('puppeteer');

async function simplePeriodTest() {
    console.log('üéÆ –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ –ü–ï–†–ò–û–î–û–í –°–¢–†–ê–•–û–í–ê–ù–ò–Ø');
    console.log('‚ïê'.repeat(50));
    console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
    console.log('1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ dropdown');
    console.log('2. –ù–∞–∂–º–∏—Ç–µ "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"');
    console.log('3. –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    console.log('');

    const results = {};

    // –¢–µ—Å—Ç 1: –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω)
    console.log('üìÖ –¢–ï–°–¢: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í');
    console.log('‚îÄ'.repeat(40));
    
    const browser = await puppeteer.launch({
        headless: false, // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
        defaultViewport: null
    });

    try {
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');

        console.log('üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { 
            waitUntil: 'networkidle2' 
        });

        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä AA1234AA...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.type('#autoNumberSearch', 'AA1234AA');

        console.log('üéØ –í–´–ë–ï–†–ò–¢–ï –ü–ï–†–ò–û–î –ò –ù–ê–ñ–ú–ò–¢–ï "–†–û–ó–†–ê–•–£–í–ê–¢–ò"');
        console.log('‚è±Ô∏è  –°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');

        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–∞–±–ª–∏—Ü—ã —Å —Ü–µ–Ω–∞–º–∏)
        await page.waitForFunction(() => {
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ –≤ –≥—Ä–∏–≤–Ω–∞—Ö
            const priceElements = document.querySelectorAll('*');
            let foundPrices = 0;
            
            priceElements.forEach(el => {
                if (el.textContent.includes('–≥—Ä–Ω') && el.textContent.match(/\d{3,5}/)) {
                    foundPrices++;
                }
            });
            
            return foundPrices >= 3; // –ñ–¥–µ–º –º–∏–Ω–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏
        }, { timeout: 60000 }); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥

        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        const selectedPeriod = await page.evaluate(() => {
            // –ò—â–µ–º select —Å –ø–µ—Ä–∏–æ–¥–æ–º
            const selects = document.querySelectorAll('select');
            for (const select of selects) {
                const options = Array.from(select.options);
                const selectedOption = options.find(opt => opt.selected);
                if (selectedOption && (selectedOption.text.includes('–º—ñ—Å—è—Ü') || 
                    selectedOption.text.includes('month') || selectedOption.text.includes('–º–µ—Å'))) {
                    return selectedOption.text.trim();
                }
            }
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const offers = await page.evaluate(() => {
            const results = [];
            const rows = document.querySelectorAll('table tr, .Table tr');
            
            rows.forEach((row, index) => {
                const text = row.textContent;
                if (text.includes('–≥—Ä–Ω') && !text.includes('–¶—ñ–Ω–∞') && !text.includes('–ö–æ–º–ø–∞–Ω—ñ—è')) {
                    const priceCell = row.querySelector('.Table__cell_price, td[class*="price"], .price');
                    const priceText = priceCell ? priceCell.textContent : text;
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
                    const priceMatches = priceText.match(/(\d{3,5})\s*–≥—Ä–Ω/g);
                    if (priceMatches) {
                        const prices = priceMatches.map(p => parseInt(p.replace(/\D/g, '')));
                        const currentPrice = Math.min(...prices);
                        const oldPrice = prices.length > 1 ? Math.max(...prices) : null;
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∫–∏–¥–∫—É
                        const discountMatch = text.match(/(\d+)%/);
                        const discount = discountMatch ? parseInt(discountMatch[1]) : null;
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é
                        let companyName = `–ö–æ–º–ø–∞–Ω–∏—è ${results.length + 1}`;
                        const companies = ['USG', 'ARX', '–ö–ù–Ø–ñ–ê', '–ï–¢–ê–õ–û–ù', '–ö–†–ï–î–û', '–û–†–ê–ù–¢–ê', '–£–ü–°–ö', 'PZU', '–£–ù–Ü–ö–ê', '–Ü–ù–ì–û'];
                        for (const company of companies) {
                            if (text.includes(company)) {
                                companyName = company;
                                break;
                            }
                        }
                        
                        results.push({
                            companyName,
                            price: currentPrice,
                            oldPrice,
                            discount,
                            currency: '–≥—Ä–Ω',
                            rawText: text.substring(0, 150)
                        });
                    }
                }
            });
            
            return results;
        });

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log('‚ïê'.repeat(40));
        console.log(`üéõÔ∏è  –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: ${selectedPeriod}`);
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${offers.length}`);
        
        if (offers.length > 0) {
            console.log('\nüí∞ –¶–ï–ù–´:');
            offers.forEach((offer, i) => {
                console.log(`${i + 1}. ${offer.companyName}: ${offer.price}‚Ç¥`);
                if (offer.oldPrice) {
                    console.log(`   –ë—ã–ª–∞: ${offer.oldPrice}‚Ç¥ (—Å–∫–∏–¥–∫–∞ ${offer.discount}%)`);
                }
            });
            
            const minPrice = Math.min(...offers.map(o => o.price));
            const maxPrice = Math.max(...offers.map(o => o.price));
            const avgPrice = Math.round(offers.reduce((s, o) => s + o.price, 0) / offers.length);
            
            console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
            console.log(`   –ú–∏–Ω–∏–º—É–º: ${minPrice}‚Ç¥`);
            console.log(`   –ú–∞–∫—Å–∏–º—É–º: ${maxPrice}‚Ç¥`);
            console.log(`   –°—Ä–µ–¥–Ω–µ–µ: ${avgPrice}‚Ç¥`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
            const result = {
                selectedPeriod,
                timestamp: new Date().toISOString(),
                vehicleNumber: 'AA1234AA',
                totalOffers: offers.length,
                minPrice,
                maxPrice,
                avgPrice,
                offers
            };
            
            console.log('\nüìã JSON –†–ï–ó–£–õ–¨–¢–ê–¢:');
            console.log(JSON.stringify(result, null, 2));
            
        } else {
            console.log('‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:');
        console.log('‚îÄ'.repeat(30));
        console.log('1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥');
        console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑');
        console.log('3. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
        
        console.log('\nüîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...');
        console.log('‚è∏Ô∏è  –ó–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ');
        
        // –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        await page.waitForTimeout(120000);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await browser.close();
    }
    
    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
}

simplePeriodTest();
