/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ò–ù–ê–õ–¨–ù–´–ô –≠–ö–°–¢–†–ê–ö–¢–û–†
 * –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */

const puppeteer = require('puppeteer');

class FixedPeriodExtractor {
    constructor() {
        this.browser = null;
        this.page = null;
    }

    async init(headless = true) {
        console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ (headless: ${headless})...`);
        
        this.browser = await puppeteer.launch({
            headless: headless,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        this.page = await this.browser.newPage();
        await this.page.setViewport({ width: 1366, height: 768 });
    }

    async selectPeriod(months) {
        console.log(`üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤...`);
        
        try {
            await this.page.waitForSelector('#coverageTime', { timeout: 10000 });
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
            await this.page.click('#coverageTime');
            await this.page.waitForTimeout(500);
            
            // –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω—É–∂–Ω–æ–π –æ–ø—Ü–∏–∏
            const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
            const labels = await this.page.$$('#coverageTime .Select__option');
            
            for (const label of labels) {
                const text = await label.evaluate(el => el.textContent.trim());
                if (text === targetText) {
                    await label.click();
                    await this.page.waitForTimeout(1000);
                    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${targetText}`);
                    return true;
                }
            }
            
            throw new Error(`–ü–µ—Ä–∏–æ–¥ "${targetText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: ${error.message}`);
            return false;
        }
    }

    async extractDataForPeriod(plateNumber, months) {
        console.log(`\nüí∞ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø ${months} –ú–ï–°–Ø–¶–ï–í`);
        console.log('=' .repeat(50));

        try {
            console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
            await this.page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
            await this.page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await this.page.click('#autoNumberSearch');
            await this.page.keyboard.down('Meta');
            await this.page.keyboard.press('KeyA');
            await this.page.keyboard.up('Meta');
            await this.page.type('#autoNumberSearch', plateNumber);

            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ 12 –º–µ—Å—è—Ü–µ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            if (months !== 12) {
                const periodSelected = await this.selectPeriod(months);
                if (!periodSelected) {
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ ${months} –º–µ—Å—è—Ü–µ–≤`);
                }
            } else {
                console.log('üïí –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (12 –º–µ—Å—è—Ü–µ–≤)');
            }

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
            await this.page.click('#btnCalculateNumber');

            console.log('‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const resultSelectors = [
                '.Listing',
                '.Listing__table',
                '.Table__cell_price',
                '.offersList',
                '.offers',
                '.insurance-offers',
                '.results'
            ];

            let resultsFound = false;
            let waitTime = 0;
            const maxWaitTime = 60000; // 60 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

            while (!resultsFound && waitTime < maxWaitTime) {
                for (const selector of resultSelectors) {
                    try {
                        await this.page.waitForSelector(selector, { timeout: 2000 });
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                        resultsFound = true;
                        break;
                    } catch (e) {
                        // –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                    }
                }
                
                if (!resultsFound) {
                    console.log(`‚è≥ –ñ–¥–µ–º –µ—â–µ 3 —Å–µ–∫—É–Ω–¥—ã... (${waitTime/1000}s)`);
                    await this.page.waitForTimeout(3000);
                    waitTime += 3000;
                }
            }

            if (!resultsFound) {
                throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
            }

            // –ñ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            await this.page.waitForTimeout(5000);

            console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            const offers = await this.page.evaluate(() => {
                const results = [];

                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                const possibleSelectors = [
                    '.Listing .Table__cell_price',
                    '.offers .offer',
                    '.insurance-offer',
                    '.result-item',
                    '[class*="price"]',
                    '[class*="offer"]'
                ];

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
                const priceElements = [];
                possibleSelectors.forEach(selector => {
                    try {
                        const elements = document.querySelectorAll(selector);
                        elements.forEach(el => {
                            const text = el.textContent?.trim() || '';
                            if (text.match(/\d+.*‚Ç¥|‚Ç¥.*\d+|\d+\s*–≥—Ä–Ω|–≥—Ä–Ω\s*\d+/)) {
                                priceElements.push(el);
                            }
                        });
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                    }
                });

                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
                if (priceElements.length > 0) {
                    priceElements.forEach((el, index) => {
                        const text = el.textContent.trim();
                        const priceMatch = text.match(/(\d+(?:\s?\d+)*)/);
                        const price = priceMatch ? priceMatch[1].replace(/\s/g, '') + '‚Ç¥' : text;
                        
                        results.push({
                            company: `–ö–æ–º–ø–∞–Ω–∏—è ${index + 1}`,
                            price: price,
                            index: index + 1,
                            fullText: text
                        });
                    });
                } else {
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∏—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
                    const allElements = document.querySelectorAll('*');
                    allElements.forEach((el, index) => {
                        const text = el.textContent?.trim() || '';
                        if (text.length > 2 && text.length < 50 && 
                            text.match(/^\d+\s*‚Ç¥$|^\d+\s*–≥—Ä–Ω$/)) {
                            results.push({
                                company: `–ù–∞–π–¥–µ–Ω–æ ${results.length + 1}`,
                                price: text,
                                index: results.length + 1,
                                tag: el.tagName
                            });
                        }
                    });
                }

                return results;
            });

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤:`);
            offers.forEach((offer, i) => {
                console.log(`   ${i + 1}. ${offer.company}: ${offer.price}`);
            });

            return {
                success: true,
                plateNumber: plateNumber,
                period: `${months} –º–µ—Å—è—Ü–µ–≤`,
                offersCount: offers.length,
                offers: offers,
                extractedAt: new Date().toISOString()
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤: ${error.message}`);
            return {
                success: false,
                plateNumber: plateNumber,
                period: `${months} –º–µ—Å—è—Ü–µ–≤`,
                error: error.message,
                extractedAt: new Date().toISOString()
            };
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }
}

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
async function quickTestFixed(plateNumber, months = 12) {
    const extractor = new FixedPeriodExtractor();
    
    try {
        await extractor.init(false); // –í–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º
        const result = await extractor.extractDataForPeriod(plateNumber, months);
        
        console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log(JSON.stringify(result, null, 2));
        
        return result;
    } finally {
        await extractor.close();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
if (require.main === module) {
    const args = process.argv.slice(2);
    
    if (args.length > 0) {
        const plateNumber = args[0] || 'AA1111AA';
        const months = parseInt(args[1]) || 12;
        
        quickTestFixed(plateNumber, months)
            .then(() => process.exit(0))
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                process.exit(1);
            });
    } else {
        console.log('üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ö–°–¢–†–ê–ö–¢–û–†');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node fixed-extractor.js AA1111AA 12');
    }
}

module.exports = { FixedPeriodExtractor, quickTestFixed };
