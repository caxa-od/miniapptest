const puppeteer = require('puppeteer');

class SinglePeriodExtractorWithCarInfo {
    constructor() {
        this.browser = null;
        this.page = null;
    }

    async initialize(headless = true) {
        this.browser = await puppeteer.launch({
            headless: headless,
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
            defaultViewport: { width: 1280, height: 720 }
        });
        this.page = await this.browser.newPage();
        
        await this.page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
    }

    async extractCarInfo() {
        try {
            // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ –≤ —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            const carInfoSelectors = [
                '.Listing__selected span',
                '.Listing__selected', 
                '.FormGroup__content span'
            ];

            for (const selector of carInfoSelectors) {
                try {
                    const element = await this.page.$(selector);
                    if (element) {
                        const text = await element.evaluate(el => el.textContent.trim());
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
                        if (this.isCarInfoText(text)) {
                            return this.parseCarInfo(text);
                        }
                    }
                } catch (error) {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
                    continue;
                }
            }

            return {
                city: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                country: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                vehicleType: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                engineVolume: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                brand: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                model: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                raw: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:', error);
            return {
                city: '–û—à–∏–±–∫–∞',
                country: '–û—à–∏–±–∫–∞',
                vehicleType: '–û—à–∏–±–∫–∞',
                engineVolume: '–û—à–∏–±–∫–∞',
                brand: '–û—à–∏–±–∫–∞',
                model: '–û—à–∏–±–∫–∞',
                raw: error.message
            };
        }
    }

    isCarInfoText(text) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        const carIndicators = [
            '—Å–º3',           // –æ–±—ä–µ–º –¥–≤–∏–≥—É–Ω–∞
            '–∞–≤—Ç–æ–º–æ–±—ñ–ª—å',    // —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            'MERCEDES',      // –º–∞—Ä–∫–∏ –∞–≤—Ç–æ
            'BMW',
            'AUDI',
            'VOLKSWAGEN',
            'TOYOTA',
            '–£–∫—Ä–∞—ó–Ω–∞',       // —Å—Ç—Ä–∞–Ω–∞
            '–º. –ö–∏—ó–≤',       // –≥–æ—Ä–æ–¥
            '–º. –õ—å–≤—ñ–≤',
            '–º. –•–∞—Ä–∫—ñ–≤'
        ];

        return carIndicators.some(indicator => 
            text.toLowerCase().includes(indicator.toLowerCase())
        );
    }

    parseCarInfo(text) {
        // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: "–º. –ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞, –ª–µ–≥–∫–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å - 2001 - 3000 —Å–º3, MERCEDES-BENZ S 400"
        const info = {
            city: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
            country: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ', 
            vehicleType: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
            engineVolume: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
            brand: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
            model: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
            raw: text
        };

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥
        const cityMatch = text.match(/–º\.\s*([^,]+)/);
        if (cityMatch) {
            info.city = cityMatch[1].trim();
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–∞–Ω—É
        if (text.includes('–£–∫—Ä–∞—ó–Ω–∞')) {
            info.country = '–£–∫—Ä–∞—ó–Ω–∞';
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
        const vehicleMatch = text.match(/(–ª–µ–≥–∫–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å|–≤–∞–Ω—Ç–∞–∂–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å|–∞–≤—Ç–æ–±—É—Å|–º–æ—Ç–æ—Ü–∏–∫–ª)\s*-\s*([^,]+)/);
        if (vehicleMatch) {
            info.vehicleType = vehicleMatch[1];
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
            const engineMatch = vehicleMatch[2].match(/(\d+\s*-\s*\d+\s*—Å–º3|\d+\s*—Å–º3|–µ–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—å)/);
            if (engineMatch) {
                info.engineVolume = engineMatch[1];
            }
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        const brandModelMatch = text.match(/([A-Z-]+)\s+([A-Z0-9\s]+)$/);
        if (brandModelMatch) {
            info.brand = brandModelMatch[1];
            info.model = brandModelMatch[2].trim();
        }

        return info;
    }

    async extractCompleteData(plateNumber, period = 6) {
        try {
            console.log(`üöó –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${plateNumber} –Ω–∞ ${period} –º–µ—Å—è—Ü–µ–≤...`);
            
            await this.page.goto('https://riskins-insurance.eua.in.ua/', { 
                waitUntil: 'networkidle2', 
                timeout: 30000 
            });

            // –í–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            await this.page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await this.page.click('#autoNumberSearch');
            await this.page.type('#autoNumberSearch', plateNumber);

            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
            await this.page.waitForSelector('#coverageTime', { timeout: 5000 });
            await this.page.click('#coverageTime');
            await this.page.waitForTimeout(1000);
            
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            await this.page.waitForSelector('.Select__option', { timeout: 5000 });
            
            // –ò—â–µ–º –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É
            const targetText = period === 6 ? '6 –º—ñ—Å—è—Ü—ñ–≤' : '12 –º—ñ—Å—è—Ü—ñ–≤';
            const options = await this.page.$$('.Select__option');
            let optionFound = false;
            
            for (const option of options) {
                const text = await option.evaluate(el => el.textContent.trim());
                if (text.includes(targetText)) {
                    await option.click();
                    optionFound = true;
                    break;
                }
            }
            
            if (!optionFound) {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø—Ü–∏—é –¥–ª—è ${period} –º–µ—Å—è—Ü–µ–≤`);
            }

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞—Å—á–µ—Ç–∞
            await this.page.click('#btnCalculateNumber');
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await this.page.waitForSelector('.Table__row', { timeout: 15000 });
            await this.page.waitForTimeout(3000);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            const carInfo = await this.extractCarInfo();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
            const offers = await this.page.evaluate(() => {
                const rows = document.querySelectorAll('.Table__row');
                const results = [];

                rows.forEach(row => {
                    try {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø/–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                        const logoImg = row.querySelector('.Table__cell_logo img');
                        let company = 'Unknown';
                        if (logoImg) {
                            company = logoImg.alt || logoImg.src.split('/').pop().split('.')[0] || 'Unknown';
                        }

                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É
                        const priceCell = row.querySelector('.Table__cell_price');
                        if (!priceCell) return;

                        // –ò—â–µ–º —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π –∏ –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É
                        const discountElement = row.querySelector('.Table__discount');
                        let fullPrice = null;
                        let discountedPrice = null;
                        let discountPercentage = null;

                        if (discountElement) {
                            // –ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–µ
                            const discountSpans = discountElement.querySelectorAll('span');
                            if (discountSpans.length >= 2) {
                                // –ü–µ—Ä–≤—ã–π span - —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π (–∫—Ä–∞—Å–Ω—ã–π)
                                const discountedText = discountSpans[0].textContent.trim();
                                const discountedMatch = discountedText.match(/(\d+(?:\s*\d+)*)\s*–≥—Ä–Ω/);
                                if (discountedMatch) {
                                    discountedPrice = parseInt(discountedMatch[1].replace(/\s/g, ''));
                                }

                                // –í—Ç–æ—Ä–æ–π span - –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ (—Å–µ—Ä—ã–π, –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π)  
                                const fullText = discountSpans[1].textContent.trim();
                                const fullMatch = fullText.match(/(\d+(?:\s*\d+)*)\s*–≥—Ä–Ω/);
                                if (fullMatch) {
                                    fullPrice = parseInt(fullMatch[1].replace(/\s/g, ''));
                                }
                            }

                            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                            const percentElement = discountElement.previousElementSibling;
                            if (percentElement) {
                                const percentMatch = percentElement.textContent.match(/(\d+)%/);
                                if (percentMatch) {
                                    discountPercentage = parseInt(percentMatch[1]);
                                }
                            }
                        } else {
                            // –ù–µ—Ç —Å–∫–∏–¥–∫–∏, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞
                            const priceText = priceCell.textContent.trim();
                            const priceMatch = priceText.match(/(\d+(?:\s*\d+)*)\s*–≥—Ä–Ω/);
                            if (priceMatch) {
                                fullPrice = parseInt(priceMatch[1].replace(/\s/g, ''));
                                discountedPrice = fullPrice; // –¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏
                            }
                        }

                        if (fullPrice !== null || discountedPrice !== null) {
                            const savings = fullPrice && discountedPrice ? fullPrice - discountedPrice : 0;
                            
                            results.push({
                                company: company,
                                fullPrice: fullPrice,
                                discountedPrice: discountedPrice,
                                discountPercentage: discountPercentage,
                                savings: savings,
                                currency: '–≥—Ä–Ω'
                            });
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏:', error);
                    }
                });

                return results;
            });

            if (offers.length === 0) {
                throw new Error('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const validOffers = offers.filter(offer => offer.discountedPrice > 0);
            const prices = validOffers.map(offer => offer.discountedPrice);
            const average = prices.reduce((sum, price) => sum + price, 0) / prices.length;
            const min = Math.min(...prices);
            const max = Math.max(...prices);

            const result = {
                plateNumber: plateNumber,
                period: period,
                timestamp: new Date().toISOString(),
                carInfo: carInfo,
                offers: validOffers,
                statistics: {
                    totalOffers: validOffers.length,
                    averagePrice: Math.round(average),
                    minPrice: min,
                    maxPrice: max,
                    priceRange: max - min
                }
            };

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            console.log(`\n‚úÖ –î–ê–ù–ù–´–ï –ò–ó–í–õ–ï–ß–ï–ù–´ –£–°–ü–ï–®–ù–û`);
            console.log(`üöó –ù–æ–º–µ—Ä: ${plateNumber}`);
            console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: ${period} –º–µ—Å—è—Ü–µ–≤`);
            console.log(`\nüöô –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï:`);
            console.log(`   –ú–∞—Ä–∫–∞: ${carInfo.brand}`);
            console.log(`   –ú–æ–¥–µ–ª—å: ${carInfo.model}`);
            console.log(`   –¢–∏–ø: ${carInfo.vehicleType}`);
            console.log(`   –î–≤–∏–≥–∞—Ç–µ–ª—å: ${carInfo.engineVolume}`);
            console.log(`   –ì–æ—Ä–æ–¥: ${carInfo.city}`);
            console.log(`   –°—Ç—Ä–∞–Ω–∞: ${carInfo.country}`);
            console.log(`\nüí∞ –°–¢–†–ê–•–û–í–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:`);
            console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${validOffers.length}`);
            console.log(`   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(average)}‚Ç¥`);
            console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${min}‚Ç¥`);
            console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${max}‚Ç¥`);
            
            return result;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${plateNumber}:`, error);
            throw error;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
        }
    }
}

module.exports = SinglePeriodExtractorWithCarInfo;

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    async function testExtractor() {
        const extractor = new SinglePeriodExtractorWithCarInfo();
        
        try {
            await extractor.initialize(true); // headless mode
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–æ–º–µ—Ä–æ–º AA1111AA –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
            const result6 = await extractor.extractCompleteData('AA1111AA', 6);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const fs = require('fs');
            fs.writeFileSync(
                `full_data_${result6.plateNumber}_${result6.period}m.json`, 
                JSON.stringify(result6, null, 2)
            );
            
            console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
        } finally {
            await extractor.close();
        }
    }
    
    testExtractor();
}
