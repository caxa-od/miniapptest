/**
 * –¢–ï–°–¢ –ù–û–ú–ï–†–ê AA1111AA –ù–ê –†–ê–ó–ù–´–ï –ü–ï–†–ò–û–î–´
 */

const RiskinsAPI = require('./riskins-api.js');
const FixedPeriodTester = require('./fixed-period-test.js');

async function testAA1111AA() {
    console.log('üîç –¢–ï–°–¢ –¶–ï–ù –î–õ–Ø –ù–û–ú–ï–†–ê AA1111AA');
    console.log('=' .repeat(50));
    
    const vehicleNumber = 'AA1111AA';
    const tester = new FixedPeriodTester();
    
    console.log(`üöó –ù–æ–º–µ—Ä: ${vehicleNumber}`);
    console.log('üìä –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ 6 –∏ 12 –º–µ—Å—è—Ü–µ–≤...\n');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        const results = await tester.compareAllPeriods(vehicleNumber);
        
        console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log('=' .repeat(50));
        
        const successful = results.filter(r => r.success && r.offers && r.offers.length > 0);
        
        if (successful.length >= 2) {
            const [result6, result12] = successful;
            
            console.log(`\nüìÖ 6 –ú–ï–°–Ø–¶–ï–í:`);
            console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${result6.totalOffers} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);
            console.log(`   üí∞ –¶–µ–Ω—ã: ${result6.offers.map(o => o.price + '‚Ç¥').join(', ')}`);
            
            const prices6 = result6.offers.map(o => o.price).sort((a, b) => a - b);
            const avg6 = Math.round(prices6.reduce((a, b) => a + b, 0) / prices6.length);
            console.log(`   üìä –î–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...prices6)}‚Ç¥ - ${Math.max(...prices6)}‚Ç¥`);
            console.log(`   üìà –°—Ä–µ–¥–Ω—è—è: ${avg6}‚Ç¥`);
            
            console.log(`\nüìÖ 12 –ú–ï–°–Ø–¶–ï–í:`);
            console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${result12.totalOffers} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);
            console.log(`   üí∞ –¶–µ–Ω—ã: ${result12.offers.map(o => o.price + '‚Ç¥').join(', ')}`);
            
            const prices12 = result12.offers.map(o => o.price).sort((a, b) => a - b);
            const avg12 = Math.round(prices12.reduce((a, b) => a + b, 0) / prices12.length);
            console.log(`   üìä –î–∏–∞–ø–∞–∑–æ–Ω: ${Math.min(...prices12)}‚Ç¥ - ${Math.max(...prices12)}‚Ç¥`);
            console.log(`   üìà –°—Ä–µ–¥–Ω—è—è: ${avg12}‚Ç¥`);
            
            console.log(`\nüéØ –°–†–ê–í–ù–ï–ù–ò–ï:`);
            console.log(`   üí≤ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ: ${Math.abs(avg12 - avg6)}‚Ç¥`);
            console.log(`   üìä –†–∞–∑–Ω–∏—Ü–∞ –≤ %: ${Math.round(((avg12 - avg6) / avg6) * 100)}%`);
            
            if (avg12 > avg6) {
                console.log(`   üí° 12 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ä–æ–∂–µ –Ω–∞ ${avg12 - avg6}‚Ç¥`);
            } else if (avg6 > avg12) {
                console.log(`   üí° 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ—Ä–æ–∂–µ –Ω–∞ ${avg6 - avg12}‚Ç¥`);
            } else {
                console.log(`   üí° –¶–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ`);
            }
            
            // –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            console.log(`\nüèÜ –õ–£–ß–®–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:`);
            const cheapest6 = result6.offers.reduce((min, offer) => offer.price < min.price ? offer : min);
            const cheapest12 = result12.offers.reduce((min, offer) => offer.price < min.price ? offer : min);
            
            console.log(`   üìÖ 6 –º–µ—Å: ${cheapest6.companyName} - ${cheapest6.price}‚Ç¥`);
            console.log(`   üìÖ 12 –º–µ—Å: ${cheapest12.companyName} - ${cheapest12.price}‚Ç¥`);
            
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            results.forEach(result => {
                if (!result.success) {
                    console.log(`‚ùå ${result.period} –º–µ—Å—è—Ü–µ–≤: ${result.error}`);
                }
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    testAA1111AA()
        .then(() => {
            console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { testAA1111AA };
