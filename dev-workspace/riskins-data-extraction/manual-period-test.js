/**
 * –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –° –†–£–ß–ù–´–ú –í–´–ë–û–†–û–ú –ü–ï–†–ò–û–î–ê
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—Ä—É—á–Ω—É—é –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */

const puppeteer = require('puppeteer');

async function manualPeriodTest() {
    console.log('üéÆ –†–£–ß–ù–û–ô –¢–ï–°–¢ –í–´–ë–û–†–ê –ü–ï–†–ò–û–î–ê');
    console.log('‚ïê'.repeat(50));
    console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
    console.log('1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º 6 –º–µ—Å—è—Ü–µ–≤');
    console.log('2. –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º 12 –º–µ—Å—è—Ü–µ–≤');
    console.log('3. –°—Ä–∞–≤–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    console.log('');

    const results = {};

    // –¢–µ—Å—Ç 1: 6 –º–µ—Å—è—Ü–µ–≤
    console.log('üìÖ –¢–ï–°–¢ 1: 6 –ú–ï–°–Ø–¶–ï–í');
    console.log('‚îÄ'.repeat(30));
    results.month6 = await testSpecificPeriod(6);
    
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –¢–µ—Å—Ç 2: 12 –º–µ—Å—è—Ü–µ–≤  
    console.log('\nüìÖ –¢–ï–°–¢ 2: 12 –ú–ï–°–Ø–¶–ï–í');
    console.log('‚îÄ'.repeat(30));
    results.month12 = await testSpecificPeriod(12);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log('‚ïê'.repeat(50));
    
    if (results.month6.success && results.month12.success) {
        console.log('6 –º–µ—Å—è—Ü–µ–≤:');
        console.log(`  üì¶ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${results.month6.offers.length}`);
        console.log(`  üí∞ –¶–µ–Ω—ã: ${results.month6.offers.map(o => o.price + '‚Ç¥').join(', ')}`);
        
        console.log('\n12 –º–µ—Å—è—Ü–µ–≤:');
        console.log(`  üì¶ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${results.month12.offers.length}`);
        console.log(`  üí∞ –¶–µ–Ω—ã: ${results.month12.offers.map(o => o.price + '‚Ç¥').join(', ')}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        const avg6 = results.month6.offers.reduce((s, o) => s + o.price, 0) / results.month6.offers.length;
        const avg12 = results.month12.offers.reduce((s, o) => s + o.price, 0) / results.month12.offers.length;
        
        console.log(`\nüîç –ê–ù–ê–õ–ò–ó:`);
        console.log(`–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ 6 –º–µ—Å: ${Math.round(avg6)}‚Ç¥`);
        console.log(`–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ 12 –º–µ—Å: ${Math.round(avg12)}‚Ç¥`);
        console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${Math.round(avg12 - avg6)}‚Ç¥ (${Math.round(((avg12 - avg6) / avg6) * 100)}%)`);
        
        if (Math.abs(avg12 - avg6) < 10) {
            console.log('üí° –¶–µ–Ω—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–∏–æ–¥ –Ω–µ –≤–ª–∏—è–µ—Ç');
        } else {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–∞—Ö!');
        }
    } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
    }
    
    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
}

async function testSpecificPeriod(months) {
    console.log(`üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${months} –º–µ—Å—è—Ü–µ–≤...`);
    
    const browser = await puppeteer.launch({
        headless: false, // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
        defaultViewport: null
    });

    try {
        const page = await browser.newPage();
        await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');

        console.log('  üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
        await page.goto('https://riskins-insurance.eua.in.ua/', { 
            waitUntil: 'networkidle2' 
        });

        console.log('  üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä AA1234AA...');
        await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
        await page.click('#autoNumberSearch');
        await page.type('#autoNumberSearch', 'AA1234AA');

        console.log(`  üìÖ –í–´–ë–ï–†–ò–¢–ï –í–†–£–ß–ù–£–Æ ${months} –ú–ï–°–Ø–¶–ï–í –≤ –ø–æ–ª–µ "–ü–µ—Ä—ñ–æ–¥ –¥—ñ—ó"`);
        console.log('  ‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥...');
        
        // –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è Enter
        await page.waitForFunction(() => {
            return new Promise(resolve => {
                const handler = (e) => {
                    if (e.key === 'Enter') {
                        document.removeEventListener('keydown', handler);
                        resolve(true);
                    }
                };
                document.addEventListener('keydown', handler);
            });
        });

        console.log('  ‚úÖ –ü–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
        const submitButton = await page.$('#btnCalculateNumber');
        if (submitButton) {
            await submitButton.click();
        }

        console.log('  ‚è±Ô∏è  –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 15 —Å–µ–∫—É–Ω–¥...');
        await page.waitForTimeout(15000);

        console.log('  üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
        const offers = await page.evaluate(() => {
            const results = [];
            const rows = document.querySelectorAll('table tr, .Table tr');
            
            rows.forEach(row => {
                const text = row.textContent;
                if (text.includes('–≥—Ä–Ω') && !text.includes('–¶—ñ–Ω–∞')) {
                    const priceMatch = text.match(/(\d{3,5})\s*–≥—Ä–Ω/);
                    if (priceMatch) {
                        results.push({
                            price: parseInt(priceMatch[1]),
                            text: text.trim().substring(0, 100)
                        });
                    }
                }
            });
            
            return results;
        });

        console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);
        
        return {
            success: true,
            months,
            offers,
            timestamp: new Date().toISOString()
        };

    } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        return {
            success: false,
            months,
            error: error.message
        };
    } finally {
        await browser.close();
    }
}

manualPeriodTest();
