/**
 * –¢–ï–°–¢ –≠–ö–°–¢–†–ê–ö–¢–û–†–ê –° –†–ê–ó–ù–´–ú–ò –ü–ï–†–ò–û–î–ê–ú–ò –°–¢–†–ê–•–û–í–ê–ù–ò–Ø
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ 6 –∏ 12 –º–µ—Å—è—Ü–µ–≤
 */

const puppeteer = require('puppeteer');

class PeriodTestExtractor {
    constructor(options = {}) {
        this.baseUrl = 'https://riskins-insurance.eua.in.ua/';
        this.options = {
            headless: false, // –í–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            timeout: 30000,
            ...options
        };
    }

    async testInsurancePeriods(vehicleNumber, periods = [6, 12]) {
        console.log(`üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ò–û–î–û–í –°–¢–†–ê–•–û–í–ê–ù–ò–Ø –¥–ª—è ${vehicleNumber}`);
        console.log('‚ïê'.repeat(60));
        
        const results = [];
        
        for (const monthsPeriod of periods) {
            console.log(`\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥: ${monthsPeriod} –º–µ—Å—è—Ü–µ–≤`);
            console.log('‚îÄ'.repeat(50));
            
            const result = await this.getOffersForPeriod(vehicleNumber, monthsPeriod);
            results.push({
                period: monthsPeriod,
                ...result
            });
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
        return this.compareResults(results);
    }

    async getOffersForPeriod(vehicleNumber, months) {
        let browser;
        try {
            browser = await puppeteer.launch({
                headless: this.options.headless,
                args: ['--no-sandbox', '--disable-setuid-sandbox'],
                defaultViewport: null
            });

            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');

            console.log('üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º Riskins Insurance...');
            await page.goto(this.baseUrl, { waitUntil: 'networkidle2' });

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä:', vehicleNumber);
            await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await page.click('#autoNumberSearch');
            await page.keyboard.down('Meta');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Meta');
            await page.type('#autoNumberSearch', vehicleNumber);

            console.log(`üìÖ –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤`);
            await this.selectInsurancePeriod(page, months);

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
            const submitButton = await page.$('#btnCalculateNumber, #btnCalculateSearch');
            if (!submitButton) {
                throw new Error('–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            await submitButton.click();

            console.log('‚è±Ô∏è  –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            await page.waitForTimeout(15000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

            console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            const offers = await this.extractInsuranceData(page);

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤`);

            return {
                success: true,
                vehicleNumber,
                months,
                offers,
                totalOffers: offers.length,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤:`, error.message);
            return {
                success: false,
                months,
                error: error.message,
                timestamp: new Date().toISOString()
            };
        } finally {
            if (browser) {
                await browser.close();
            }
        }
    }

    async selectInsurancePeriod(page, months) {
        try {
            // –ò—â–µ–º –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            const periodSelectors = [
                'select[name*="period"]',
                'select[name*="month"]',
                'select[name*="—Å—Ä–æ–∫"]',
                '.Select select',
                '#insurancePeriod',
                '#period',
                '[id*="period"]',
                '[name*="period"]'
            ];

            let periodField = null;
            for (const selector of periodSelectors) {
                try {
                    periodField = await page.$(selector);
                    if (periodField) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞: ${selector}`);
                        break;
                    }
                } catch (e) {
                    continue;
                }
            }

            if (periodField) {
                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥
                const value = months === 6 ? '6' : '12';
                await page.select(await page.evaluate(el => el.getAttribute('name') || el.getAttribute('id'), periodField), value);
                console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤`);
            } else {
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–µ–ª–µ–∫—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                console.log('üîç –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞...');
                
                const periodTexts = [`${months} –º–µ—Å`, `${months} –º–µ—Å—è—Ü`, months.toString()];
                for (const text of periodTexts) {
                    try {
                        const element = await page.$x(`//*[contains(text(), '${text}')]`);
                        if (element.length > 0) {
                            await element[0].click();
                            console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç: ${text}`);
                            return;
                        }
                    } catch (e) {
                        continue;
                    }
                }
                
                console.log('‚ö†Ô∏è  –°–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞:', error.message);
        }
    }

    async extractInsuranceData(page) {
        return await page.evaluate(() => {
            const offers = [];
            const tableRows = document.querySelectorAll('table tr, .Table tr');
            
            tableRows.forEach((row, index) => {
                const rowText = row.textContent;
                
                if (!rowText || rowText.includes('–¶—ñ–Ω–∞') || rowText.includes('–ö–æ–º–ø–∞–Ω—ñ—è')) {
                    return;
                }

                const priceCell = row.querySelector('.Table__cell_price, td[class*="price"], .price');
                
                if (priceCell || rowText.includes('–≥—Ä–Ω')) {
                    let currentPrice = 0;
                    let oldPrice = null;
                    
                    const priceText = priceCell ? priceCell.textContent : rowText;
                    const priceMatch = priceText.match(/(\d{3,5})\s*–≥—Ä–Ω/g);
                    
                    if (priceMatch) {
                        const prices = priceMatch.map(p => parseInt(p.replace(/\D/g, '')));
                        currentPrice = Math.min(...prices);
                        if (prices.length > 1) {
                            oldPrice = Math.max(...prices);
                        }
                    }

                    let discount = null;
                    const discountMatch = rowText.match(/(\d+)%/);
                    if (discountMatch) {
                        discount = parseInt(discountMatch[1]);
                    }

                    let companyName = `–ö–æ–º–ø–∞–Ω–∏—è ${offers.length + 1}`;
                    const companyPatterns = {
                        'USG': /USG/i,
                        'ARX': /ARX/i,
                        '–ö–ù–Ø–ñ–ê': /–ö–ù–Ø–ñ–ê/i,
                        '–ï–¢–ê–õ–û–ù': /–ï–¢–ê–õ–û–ù/i,
                        '–ö–†–ï–î–û': /–ö–†–ï–î–û/i,
                        '–û–†–ê–ù–¢–ê': /–û–†–ê–ù–¢–ê/i,
                        '–£–ü–°–ö': /–£–ü–°–ö/i,
                        'PZU': /PZU/i,
                        '–£–ù–Ü–ö–ê': /–£–ù–Ü–ö–ê/i,
                        '–Ü–ù–ì–û': /–Ü–ù–ì–û/i
                    };

                    for (const [company, pattern] of Object.entries(companyPatterns)) {
                        if (pattern.test(rowText)) {
                            companyName = company;
                            break;
                        }
                    }

                    if (currentPrice > 0) {
                        offers.push({
                            id: `riskins_${Date.now()}_${index}`,
                            companyName,
                            price: currentPrice,
                            oldPrice,
                            discount,
                            currency: '–≥—Ä–Ω',
                            status: '–î–æ—Å—Ç—É–ø–Ω–æ',
                            source: 'Riskins Insurance'
                        });
                    }
                }
            });

            return offers;
        });
    }

    compareResults(results) {
        console.log('\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–û –ü–ï–†–ò–û–î–ê–ú');
        console.log('‚ïê'.repeat(60));
        
        const comparison = {
            vehicleNumber: results[0]?.vehicleNumber,
            timestamp: new Date().toISOString(),
            periods: results,
            analysis: {}
        };

        const successful = results.filter(r => r.success && r.offers.length > 0);
        
        if (successful.length >= 2) {
            const period6 = successful.find(r => r.months === 6);
            const period12 = successful.find(r => r.months === 12);
            
            if (period6 && period12) {
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
                const avg6 = period6.offers.reduce((sum, o) => sum + o.price, 0) / period6.offers.length;
                const avg12 = period12.offers.reduce((sum, o) => sum + o.price, 0) / period12.offers.length;
                
                // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
                const min6 = Math.min(...period6.offers.map(o => o.price));
                const min12 = Math.min(...period12.offers.map(o => o.price));
                
                comparison.analysis = {
                    averagePrices: {
                        month6: Math.round(avg6),
                        month12: Math.round(avg12),
                        difference: Math.round(avg12 - avg6),
                        percentDifference: Math.round(((avg12 - avg6) / avg6) * 100)
                    },
                    minimumPrices: {
                        month6: min6,
                        month12: min12,
                        difference: min12 - min6,
                        percentDifference: Math.round(((min12 - min6) / min6) * 100)
                    },
                    offersCount: {
                        month6: period6.offers.length,
                        month12: period12.offers.length
                    }
                };
                
                console.log('\nüí∞ –ê–ù–ê–õ–ò–ó –¶–ï–ù:');
                console.log('‚îÄ'.repeat(40));
                console.log(`6 –º–µ—Å—è—Ü–µ–≤ - —Å—Ä–µ–¥–Ω—è—è: ${Math.round(avg6)}‚Ç¥, –º–∏–Ω–∏–º—É–º: ${min6}‚Ç¥`);
                console.log(`12 –º–µ—Å—è—Ü–µ–≤ - —Å—Ä–µ–¥–Ω—è—è: ${Math.round(avg12)}‚Ç¥, –º–∏–Ω–∏–º—É–º: ${min12}‚Ç¥`);
                console.log(`–†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ: ${Math.round(avg12 - avg6)}‚Ç¥ (${Math.round(((avg12 - avg6) / avg6) * 100)}%)`);
                console.log(`–†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ: ${min12 - min6}‚Ç¥ (${Math.round(((min12 - min6) / min6) * 100)}%)`);
            }
        }
        
        return comparison;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runPeriodTest() {
    const extractor = new PeriodTestExtractor({ headless: true });
    
    console.log('üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–ï–†–ò–û–î–û–í –°–¢–†–ê–•–û–í–ê–ù–ò–Ø\n');
    
    const testNumber = 'AA1234AA';
    const periods = [6, 12];
    
    const results = await extractor.testInsurancePeriods(testNumber, periods);
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('‚ïê'.repeat(60));
    console.log(JSON.stringify(results, null, 2));
    
    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
}

// –≠–∫—Å–ø–æ—Ä—Ç
module.exports = PeriodTestExtractor;

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runPeriodTest();
}
