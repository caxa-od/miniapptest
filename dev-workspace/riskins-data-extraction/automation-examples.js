/**
 * –ü–†–ò–ú–ï–†–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –≠–ö–°–¢–†–ê–ö–¢–û–†–ê RISKINS
 */

const RiskinsAPI = require('./riskins-api.js');

// –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function getQuotesExample() {
    console.log('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫...');
    
    const api = new RiskinsAPI();
    const result = await api.getInsuranceQuotes('AA1234AA');
    
    if (!result.success) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', result.error);
        return [];
    }
    
    const quotes = result.offers || [];
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${quotes.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);
    quotes.forEach((quote, i) => {
        console.log(`${i+1}. ${quote.companyName}: ${quote.price}‚Ç¥`);
    });
    
    return quotes;
}

// –ü—Ä–∏–º–µ—Ä 2: –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async function findCheapestExample() {
    console.log('üí∞ –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...');
    
    const api = new RiskinsAPI();
    const result = await api.getInsuranceQuotes('AA1234AA');
    
    if (!result.success) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', result.error);
        return null;
    }
    
    const quotes = result.offers || [];
    if (quotes.length === 0) {
        console.log('‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return null;
    }
    
    const cheapest = quotes.reduce((min, quote) => 
        quote.price < min.price ? quote : min
    );
    
    console.log(`üèÜ –õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${cheapest.companyName} - ${cheapest.price}‚Ç¥`);
    
    return cheapest;
}

// –ü—Ä–∏–º–µ—Ä 3: –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
async function processBatchExample() {
    console.log('üìã –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–æ–≤...');
    
    const vehicleNumbers = ['AA1234AA', 'BB5678BB', 'CC9012CC'];
    const api = new RiskinsAPI();
    const results = [];
    
    for (const number of vehicleNumbers) {
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${number}...`);
        try {
            const quotes = await api.getInsuranceQuotes(number);
            const cheapest = api.getCheapestQuote(quotes);
            
            results.push({
                vehicleNumber: number,
                totalQuotes: quotes.length,
                cheapestPrice: cheapest.price,
                cheapestCompany: cheapest.companyName,
                allQuotes: quotes
            });
            
            console.log(`  ‚úÖ ${number}: ${quotes.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –æ—Ç ${cheapest.price}‚Ç¥`);
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, 2000));
            
        } catch (error) {
            console.error(`  ‚ùå ${number}: ${error.message}`);
            results.push({
                vehicleNumber: number,
                error: error.message
            });
        }
    }
    
    return results;
}

// –ü—Ä–∏–º–µ—Ä 4: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
async function startMonitoringExample() {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    
    const api = new RiskinsAPI();
    const vehicleNumber = 'AA1234AA';
    
    setInterval(async () => {
        try {
            console.log(`\n‚è∞ ${new Date().toLocaleTimeString()} - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã...`);
            
            const quotes = await api.getInsuranceQuotes(vehicleNumber);
            const stats = api.calculateStatistics(quotes);
            
            console.log(`üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${stats.avgPrice}‚Ç¥`);
            console.log(`üìà –î–∏–∞–ø–∞–∑–æ–Ω: ${stats.minPrice}‚Ç¥ - ${stats.maxPrice}‚Ç¥`);
            
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
        }
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

// –ü—Ä–∏–º–µ—Ä 5: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON
async function exportDataExample() {
    console.log('üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON...');
    
    const api = new RiskinsAPI();
    const result = await api.getInsuranceQuotes('AA1234AA');
    
    if (!result.success) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', result.error);
        return null;
    }
    
    const quotes = result.offers || [];
    const exportData = {
        timestamp: new Date().toISOString(),
        vehicleNumber: 'AA1234AA',
        totalQuotes: quotes.length,
        quotes: quotes,
        statistics: calculateStats(quotes)
    };
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    const fs = require('fs');
    const filename = `riskins_data_${Date.now()}.json`;
    fs.writeFileSync(filename, JSON.stringify(exportData, null, 2));
    
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filename}`);
    
    return exportData;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateStats(quotes) {
    if (quotes.length === 0) return {};
    
    const prices = quotes.map(q => q.price);
    return {
        minPrice: Math.min(...prices),
        maxPrice: Math.max(...prices),
        avgPrice: Math.round(prices.reduce((a, b) => a + b, 0) / prices.length)
    };
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
async function runAllExamples() {
    console.log('üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô');
    console.log('=' .repeat(60));
    
    try {
        // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
        await getQuotesExample();
        console.log('\n' + '-'.repeat(40) + '\n');
        
        // –ü–æ–∏—Å–∫ –¥–µ—à–µ–≤–æ–≥–æ
        await findCheapestExample();
        console.log('\n' + '-'.repeat(40) + '\n');
        
        // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        await exportDataExample();
        console.log('\n' + '-'.repeat(40) + '\n');
        
        console.log('üéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        console.log('üí° –î–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if (require.main === module) {
    runAllExamples();
}

module.exports = {
    getQuotesExample,
    findCheapestExample,
    processBatchExample,
    startMonitoringExample,
    exportDataExample
};
