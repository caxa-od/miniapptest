/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –°–†–ê–í–ù–ï–ù–ò–Ø –ü–ï–†–ò–û–î–û–í
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 */

const puppeteer = require('puppeteer');

class FinalAutomation {
    
    static async extractSinglePeriod(plateNumber, months, headless = true) {
        console.log(`\nüí∞ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï ${months} –ú–ï–°–Ø–¶–ï–í`);
        console.log('=' .repeat(40));

        let browser;
        try {
            browser = await puppeteer.launch({
                headless: headless,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            const page = await browser.newPage();
            await page.setViewport({ width: 1366, height: 768 });

            console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
            await page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
            await page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await page.click('#autoNumberSearch');
            await page.keyboard.down('Meta');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Meta');
            await page.type('#autoNumberSearch', plateNumber);

            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ 12 –º–µ—Å—è—Ü–µ–≤
            if (months !== 12) {
                console.log(`üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤...`);
                await page.waitForSelector('#coverageTime', { timeout: 10000 });
                await page.click('#coverageTime');
                await page.waitForTimeout(500);
                
                const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
                const labels = await page.$$('#coverageTime .Select__option');
                
                let found = false;
                for (const label of labels) {
                    const text = await label.evaluate(el => el.textContent.trim());
                    if (text === targetText) {
                        await label.click();
                        await page.waitForTimeout(1000);
                        console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${targetText}`);
                        found = true;
                        break;
                    }
                }
                
                if (!found) {
                    throw new Error(`–ü–µ—Ä–∏–æ–¥ "${targetText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
            } else {
                console.log('üïí –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (12 –º–µ—Å—è—Ü–µ–≤)');
            }

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
            await page.click('#btnCalculateNumber');

            console.log('‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
            await page.waitForSelector('.Table__cell', { timeout: 45000 });
            await page.waitForTimeout(5000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

            console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            const offers = await page.evaluate(() => {
                const results = [];
                const foundPrices = new Set();
                
                // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ Table__cell)
                const allElements = document.querySelectorAll('*');
                allElements.forEach(el => {
                    const text = el.textContent?.trim() || '';
                    // –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫ —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ "XXXX –≥—Ä–Ω"
                    const priceMatch = text.match(/(\d{4,5})\s*–≥—Ä–Ω/);
                    if (priceMatch && !foundPrices.has(priceMatch[1])) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏
                        if (text.length < 50 || text.match(/^\d{4,5}\s*–≥—Ä–Ω$/)) {
                            foundPrices.add(priceMatch[1]);
                            results.push({
                                company: `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${results.length + 1}`,
                                price: priceMatch[1] + '‚Ç¥',
                                index: results.length + 1
                            });
                        }
                    }
                });

                return results;
            });

            const prices = offers.map(o => parseInt(o.price.replace('‚Ç¥', '')));
            const avgPrice = prices.length > 0 ? Math.round(prices.reduce((a, b) => a + b) / prices.length) : 0;

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:`);
            offers.forEach(offer => {
                console.log(`   ${offer.index}. ${offer.price}`);
            });
            console.log(`üìä –°—Ä–µ–¥–Ω–µ–µ: ${avgPrice}‚Ç¥`);

            return {
                success: true,
                plateNumber: plateNumber,
                period: months,
                offers: offers,
                avgPrice: avgPrice,
                extractedAt: new Date().toISOString()
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ ${months} –º–µ—Å—è—Ü–µ–≤: ${error.message}`);
            return {
                success: false,
                error: error.message,
                period: months
            };
        } finally {
            if (browser) {
                await browser.close();
            }
        }
    }

    static async comparePeriodsAutomated(plateNumber, headless = true) {
        console.log(`\nü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ò–û–î–û–í`);
        console.log(`üöó –ù–æ–º–µ—Ä: ${plateNumber}`);
        console.log('=' .repeat(60));

        // –ò–∑–≤–ª–µ–∫–∞–µ–º 6 –º–µ—Å—è—Ü–µ–≤
        const result6 = await this.extractSinglePeriod(plateNumber, 6, headless);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º 12 –º–µ—Å—è—Ü–µ–≤
        const result12 = await this.extractSinglePeriod(plateNumber, 12, headless);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
        console.log('=' .repeat(40));

        const analysis = {
            plateNumber: plateNumber,
            period6: result6,
            period12: result12,
            comparison: null,
            timestamp: new Date().toISOString()
        };

        if (result6.success && result12.success) {
            const diff = result12.avgPrice - result6.avgPrice;
            const diffPercent = result6.avgPrice > 0 ? Math.round((diff / result6.avgPrice) * 100) : 0;

            console.log(`‚úÖ –û–±–∞ –ø–µ—Ä–∏–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã`);
            console.log(`\nüí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
            console.log(`   6 –º–µ—Å—è—Ü–µ–≤:  ${result6.avgPrice}‚Ç¥ (${result6.offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)`);
            console.log(`   12 –º–µ—Å—è—Ü–µ–≤: ${result12.avgPrice}‚Ç¥ (${result12.offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)`);
            console.log(`   –†–∞–∑–Ω–∏—Ü–∞:    ${diff}‚Ç¥ (${diffPercent > 0 ? '+' : ''}${diffPercent}%)`);

            let recommendation;
            if (Math.abs(diffPercent) < 5) {
                recommendation = '–¶–µ–Ω—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –≤—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
            } else if (diffPercent > 0) {
                recommendation = `12-–º–µ—Å—è—á–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ—Ä–æ–∂–µ –Ω–∞ ${diffPercent}%. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ 6-–º–µ—Å—è—á–Ω—É—é.`;
            } else {
                recommendation = `6-–º–µ—Å—è—á–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ—Ä–æ–∂–µ –Ω–∞ ${Math.abs(diffPercent)}%. –õ—É—á—à–µ –≤–∑—è—Ç—å 12-–º–µ—Å—è—á–Ω—É—é.`;
            }

            console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${recommendation}`);

            analysis.comparison = {
                avgPrice6: result6.avgPrice,
                avgPrice12: result12.avgPrice,
                difference: diff,
                differencePercent: diffPercent,
                recommendation: recommendation
            };

        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –æ–±–æ–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö');
            if (!result6.success) console.log(`   6 –º–µ—Å—è—Ü–µ–≤: ${result6.error}`);
            if (!result12.success) console.log(`   12 –º–µ—Å—è—Ü–µ–≤: ${result12.error}`);
        }

        return analysis;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
if (require.main === module) {
    const args = process.argv.slice(2);
    const plateNumber = args[0] || 'AA1111AA';
    
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –°–†–ê–í–ù–ï–ù–ò–Ø –ü–ï–†–ò–û–î–û–í');
    console.log('–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º');
    
    FinalAutomation.comparePeriodsAutomated(plateNumber, true)
        .then(result => {
            console.log('\nüéâ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            const fs = require('fs');
            const filename = `comparison_${plateNumber.replace(/[^A-Z0-9]/g, '')}_${new Date().toISOString().split('T')[0]}.json`;
            fs.writeFileSync(filename, JSON.stringify(result, null, 2));
            console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
            
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { FinalAutomation };
