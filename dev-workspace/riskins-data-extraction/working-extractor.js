/**
 * –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û –†–ê–ë–û–ß–ò–ô –≠–ö–°–¢–†–ê–ö–¢–û–† –ü–ï–†–ò–û–î–û–í
 * –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - —Ç–æ—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã!
 */

const puppeteer = require('puppeteer');

class WorkingPeriodExtractor {
    constructor() {
        this.browser = null;
        this.page = null;
    }

    async init(headless = true) {
        console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (headless: ${headless})...`);
        
        this.browser = await puppeteer.launch({
            headless: headless,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        this.page = await this.browser.newPage();
        await this.page.setViewport({ width: 1366, height: 768 });
    }

    async selectPeriod(months) {
        if (months === 12) {
            console.log('üïí –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (12 –º–µ—Å—è—Ü–µ–≤)');
            return true;
        }

        console.log(`üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤...`);
        
        try {
            await this.page.waitForSelector('#coverageTime', { timeout: 10000 });
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
            await this.page.click('#coverageTime');
            await this.page.waitForTimeout(500);
            
            // –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω—É–∂–Ω–æ–π –æ–ø—Ü–∏–∏
            const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
            const labels = await this.page.$$('#coverageTime .Select__option');
            
            for (const label of labels) {
                const text = await label.evaluate(el => el.textContent.trim());
                if (text === targetText) {
                    await label.click();
                    await this.page.waitForTimeout(1000);
                    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${targetText}`);
                    return true;
                }
            }
            
            throw new Error(`–ü–µ—Ä–∏–æ–¥ "${targetText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: ${error.message}`);
            return false;
        }
    }

    async extractData(plateNumber, months) {
        console.log(`\nüí∞ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø ${months} –ú–ï–°–Ø–¶–ï–í`);
        console.log('=' .repeat(50));

        try {
            console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
            await this.page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
            await this.page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await this.page.click('#autoNumberSearch');
            await this.page.keyboard.down('Meta');
            await this.page.keyboard.press('KeyA');
            await this.page.keyboard.up('Meta');
            await this.page.type('#autoNumberSearch', plateNumber);

            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥
            const periodSelected = await this.selectPeriod(months);
            if (!periodSelected) {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ ${months} –º–µ—Å—è—Ü–µ–≤`);
            }

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
            await this.page.click('#btnCalculateNumber');

            console.log('‚è≥ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º)
            await this.page.waitForSelector('.Table__cell', { timeout: 45000 });
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await this.page.waitForTimeout(3000);

            console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...');
            const offers = await this.page.evaluate(() => {
                const results = [];

                // –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —Ü–µ–Ω–∞–º–∏
                const rows = document.querySelectorAll('.Table__row');
                
                rows.forEach((row, index) => {
                    try {
                        // –ò—â–µ–º —Ü–µ–Ω—É –≤ —Å—Ç—Ä–æ–∫–µ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "XXXX –≥—Ä–Ω"
                        const priceElements = row.querySelectorAll('.Table__cell');
                        let price = '–ù–µ –Ω–∞–π–¥–µ–Ω–∞';
                        let company = `–ö–æ–º–ø–∞–Ω–∏—è ${index + 1}`;

                        // –ò—â–µ–º —è—á–µ–π–∫—É —Å —Ü–µ–Ω–æ–π
                        priceElements.forEach(cell => {
                            const text = cell.textContent.trim();
                            
                            // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä "4015 –≥—Ä–Ω")
                            const priceMatch = text.match(/(\d{4,5})\s*–≥—Ä–Ω/);
                            if (priceMatch && !text.includes('+')) {
                                price = priceMatch[1] + '‚Ç¥';
                            }
                            
                            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                            if (text.length > 5 && text.length < 50 && 
                                !text.includes('–≥—Ä–Ω') && !text.includes('%') &&
                                !text.includes('—Å–º3') && !text.includes('–ó–º—ñ–Ω–∏—Ç–∏')) {
                                company = text;
                            }
                        });

                        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º span –≤–Ω—É—Ç—Ä–∏ discount —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        const discountSpans = row.querySelectorAll('.Table__discount span');
                        discountSpans.forEach(span => {
                            const text = span.textContent.trim();
                            const priceMatch = text.match(/^(\d{4,5})\s*–≥—Ä–Ω$/);
                            if (priceMatch) {
                                price = priceMatch[1] + '‚Ç¥';
                            }
                        });

                        if (price !== '–ù–µ –Ω–∞–π–¥–µ–Ω–∞') {
                            results.push({
                                company: company,
                                price: price,
                                index: results.length + 1
                            });
                        }

                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${index}:`, error);
                    }
                });

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å –∫–ª–∞—Å—Å–æ–º Table__cell
                const allCells = document.querySelectorAll('.Table__cell');
                const foundPrices = new Set();
                
                allCells.forEach(cell => {
                    const text = cell.textContent.trim();
                    const priceMatch = text.match(/^(\d{4,5})\s*–≥—Ä–Ω$/);
                    if (priceMatch && !foundPrices.has(priceMatch[1])) {
                        foundPrices.add(priceMatch[1]);
                        
                        // –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–Ω–∞ –∫–æ—Ç–æ—Ä—É—é –º—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏
                        const priceValue = priceMatch[1] + '‚Ç¥';
                        if (!results.some(r => r.price === priceValue)) {
                            results.push({
                                company: `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${results.length + 1}`,
                                price: priceValue,
                                index: results.length + 1
                            });
                        }
                    }
                });

                return results;
            });

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤:`);
            offers.forEach((offer) => {
                console.log(`   ${offer.index}. ${offer.company}: ${offer.price}`);
            });

            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const prices = offers.map(o => parseInt(o.price.replace('‚Ç¥', ''))).filter(p => p > 0);
            const avgPrice = prices.length > 0 ? Math.round(prices.reduce((a, b) => a + b) / prices.length) : 0;
            const minPrice = prices.length > 0 ? Math.min(...prices) : 0;
            const maxPrice = prices.length > 0 ? Math.max(...prices) : 0;

            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –º–∏–Ω=${minPrice}‚Ç¥, –º–∞–∫—Å=${maxPrice}‚Ç¥, —Å—Ä–µ–¥–Ω–µ–µ=${avgPrice}‚Ç¥`);

            return {
                success: true,
                plateNumber: plateNumber,
                period: `${months} –º–µ—Å—è—Ü–µ–≤`,
                offersCount: offers.length,
                offers: offers,
                statistics: {
                    avgPrice: avgPrice,
                    minPrice: minPrice,
                    maxPrice: maxPrice
                },
                extractedAt: new Date().toISOString()
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤: ${error.message}`);
            return {
                success: false,
                plateNumber: plateNumber,
                period: `${months} –º–µ—Å—è—Ü–µ–≤`,
                error: error.message,
                extractedAt: new Date().toISOString()
            };
        }
    }

    async comparePeriods(plateNumber, headless = true) {
        console.log(`\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ò–û–î–û–í –î–õ–Ø ${plateNumber}`);
        console.log('=' .repeat(60));

        await this.init(headless);

        const results = {};

        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 6 –º–µ—Å—è—Ü–µ–≤
            results.period6 = await this.extractData(plateNumber, 6);
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await this.page.waitForTimeout(2000);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 12 –º–µ—Å—è—Ü–µ–≤
            results.period12 = await this.extractData(plateNumber, 12);

            // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            console.log('\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
            console.log('=' .repeat(40));

            if (results.period6.success && results.period12.success) {
                console.log('‚úÖ –û–±–∞ –ø–µ—Ä–∏–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
                
                const avg6 = results.period6.statistics.avgPrice;
                const avg12 = results.period12.statistics.avgPrice;
                const diff = avg12 - avg6;
                const diffPercent = avg6 > 0 ? Math.round((diff / avg6) * 100) : 0;

                console.log(`\nüí∞ –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã:`);
                console.log(`   6 –º–µ—Å—è—Ü–µ–≤:  ${avg6}‚Ç¥`);
                console.log(`   12 –º–µ—Å—è—Ü–µ–≤: ${avg12}‚Ç¥`);
                console.log(`   –†–∞–∑–Ω–∏—Ü–∞:    ${diff}‚Ç¥ (${diffPercent > 0 ? '+' : ''}${diffPercent}%)`);

                results.comparison = {
                    avgPrice6: avg6,
                    avgPrice12: avg12,
                    difference: diff,
                    differencePercent: diffPercent,
                    recommendation: diff > 0 ? 
                        `12-–º–µ—Å—è—á–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ—Ä–æ–∂–µ –Ω–∞ ${diff}‚Ç¥ (${diffPercent}%)` :
                        `6-–º–µ—Å—è—á–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–æ—Ä–æ–∂–µ –Ω–∞ ${Math.abs(diff)}‚Ç¥ (${Math.abs(diffPercent)}%)`
                };
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –æ–±–æ–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö');
            }

        } finally {
            await this.close();
        }

        return results;
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }
}

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
async function quickTest(plateNumber, months = 6, headless = false) {
    const extractor = new WorkingPeriodExtractor();
    
    try {
        await extractor.init(headless);
        const result = await extractor.extractData(plateNumber, months);
        return result;
    } finally {
        await extractor.close();
    }
}

// –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
async function fullComparison(plateNumber, headless = true) {
    const extractor = new WorkingPeriodExtractor();
    const result = await extractor.comparePeriods(plateNumber, headless);
    return result;
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
if (require.main === module) {
    const args = process.argv.slice(2);
    
    if (args.includes('--test')) {
        const plateNumber = args[args.indexOf('--test') + 1] || 'AA1111AA';
        const months = parseInt(args[args.indexOf('--months') + 1]) || 6;
        
        console.log(`üß™ –¢–ï–°–¢ ${months} –ú–ï–°–Ø–¶–ï–í –î–õ–Ø ${plateNumber}`);
        quickTest(plateNumber, months, false)
            .then(result => {
                console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
                console.log(JSON.stringify(result, null, 2));
                process.exit(0);
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                process.exit(1);
            });
            
    } else if (args.includes('--compare')) {
        const plateNumber = args[args.indexOf('--compare') + 1] || 'AA1111AA';
        
        console.log(`üîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ò–û–î–û–í –î–õ–Ø ${plateNumber}`);
        fullComparison(plateNumber, true)
            .then(result => {
                console.log('\nüéØ –ü–û–õ–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:');
                console.log(JSON.stringify(result, null, 2));
                process.exit(0);
            })
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                process.exit(1);
            });
            
    } else {
        console.log('üöÄ –†–ê–ë–û–ß–ò–ô –≠–ö–°–¢–†–ê–ö–¢–û–† –ü–ï–†–ò–û–î–û–í');
        console.log('');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
        console.log('  node working-extractor.js --test AA1111AA --months 6');
        console.log('  node working-extractor.js --compare AA1111AA');
    }
}

module.exports = { WorkingPeriodExtractor, quickTest, fullComparison };
