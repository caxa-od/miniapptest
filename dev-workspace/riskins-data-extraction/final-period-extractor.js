/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –≠–ö–°–¢–†–ê–ö–¢–û–† –° –ü–ï–†–ò–û–î–ê–ú–ò
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤
 */

const puppeteer = require('puppeteer');

class FinalPeriodExtractor {
    constructor() {
        this.browser = null;
        this.page = null;
    }

    async init(headless = true) {
        console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ (headless: ${headless})...`);
        
        this.browser = await puppeteer.launch({
            headless: headless,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        this.page = await this.browser.newPage();
        await this.page.setViewport({ width: 1366, height: 768 });
    }

    async selectPeriod(months) {
        console.log(`üïí –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥: ${months} –º–µ—Å—è—Ü–µ–≤...`);
        
        try {
            await this.page.waitForSelector('#coverageTime', { timeout: 10000 });
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
            await this.page.click('#coverageTime');
            await this.page.waitForTimeout(500);
            
            // –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω—É–∂–Ω–æ–π –æ–ø—Ü–∏–∏
            const targetText = `${months} –º—ñ—Å—è—Ü—ñ–≤`;
            const labels = await this.page.$$('#coverageTime .Select__option');
            
            for (const label of labels) {
                const text = await label.evaluate(el => el.textContent.trim());
                if (text === targetText) {
                    await label.click();
                    await this.page.waitForTimeout(1000);
                    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: ${targetText}`);
                    return true;
                }
            }
            
            throw new Error(`–ü–µ—Ä–∏–æ–¥ "${targetText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: ${error.message}`);
            return false;
        }
    }

    async extractDataForPeriod(plateNumber, months) {
        console.log(`\nüí∞ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø ${months} –ú–ï–°–Ø–¶–ï–í`);
        console.log('=' .repeat(50));

        try {
            console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...');
            await this.page.goto('https://riskins-insurance.eua.in.ua/', { waitUntil: 'networkidle2' });

            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä...');
            await this.page.waitForSelector('#autoNumberSearch', { timeout: 10000 });
            await this.page.click('#autoNumberSearch');
            await this.page.keyboard.down('Meta');
            await this.page.keyboard.press('KeyA');
            await this.page.keyboard.up('Meta');
            await this.page.type('#autoNumberSearch', plateNumber);

            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥
            const periodSelected = await this.selectPeriod(months);
            if (!periodSelected) {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ ${months} –º–µ—Å—è—Ü–µ–≤`);
            }

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
            await this.page.click('#btnCalculateNumber');

            console.log('‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
            await this.page.waitForSelector('.offersList', { timeout: 30000 });

            // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            await this.page.waitForTimeout(3000);

            console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            const offers = await this.page.evaluate(() => {
                const offerElements = document.querySelectorAll('.offersList .offer');
                const results = [];

                offerElements.forEach((offer, index) => {
                    try {
                        const companyElement = offer.querySelector('.company-logo img, .company-name, .offer-company');
                        const priceElement = offer.querySelector('.offer-price, .price, .cost');

                        const company = companyElement ? 
                            (companyElement.alt || companyElement.textContent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').trim() : 
                            `–ö–æ–º–ø–∞–Ω–∏—è ${index + 1}`;

                        let price = '–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
                        if (priceElement) {
                            const priceText = priceElement.textContent.trim();
                            const priceMatch = priceText.match(/(\d+(?:\s?\d+)*)/);
                            if (priceMatch) {
                                price = priceMatch[1].replace(/\s/g, '') + '‚Ç¥';
                            }
                        }

                        results.push({
                            company: company,
                            price: price,
                            index: index + 1
                        });
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ${index + 1}:`, error);
                        results.push({
                            company: `–ö–æ–º–ø–∞–Ω–∏—è ${index + 1}`,
                            price: '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è',
                            index: index + 1
                        });
                    }
                });

                return results;
            });

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${offers.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤:`);
            offers.forEach((offer, i) => {
                console.log(`   ${i + 1}. ${offer.company}: ${offer.price}`);
            });

            return {
                success: true,
                plateNumber: plateNumber,
                period: `${months} –º–µ—Å—è—Ü–µ–≤`,
                offersCount: offers.length,
                offers: offers,
                extractedAt: new Date().toISOString()
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è ${months} –º–µ—Å—è—Ü–µ–≤: ${error.message}`);
            return {
                success: false,
                plateNumber: plateNumber,
                period: `${months} –º–µ—Å—è—Ü–µ–≤`,
                error: error.message,
                extractedAt: new Date().toISOString()
            };
        }
    }

    async comparePeriods(plateNumber) {
        console.log(`\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ò–û–î–û–í –î–õ–Ø ${plateNumber}`);
        console.log('=' .repeat(60));

        const results = {};

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 6 –º–µ—Å—è—Ü–µ–≤
        results.period6 = await this.extractDataForPeriod(plateNumber, 6);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await this.page.waitForTimeout(2000);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 12 –º–µ—Å—è—Ü–µ–≤
        results.period12 = await this.extractDataForPeriod(plateNumber, 12);

        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.log('\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:');
        console.log('=' .repeat(40));

        if (results.period6.success && results.period12.success) {
            console.log('‚úÖ –û–±–∞ –ø–µ—Ä–∏–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
            
            const prices6 = results.period6.offers.map(o => 
                parseInt(o.price.replace(/[^\d]/g, '')) || 0
            ).filter(p => p > 0);
            
            const prices12 = results.period12.offers.map(o => 
                parseInt(o.price.replace(/[^\d]/g, '')) || 0
            ).filter(p => p > 0);

            if (prices6.length > 0 && prices12.length > 0) {
                const avg6 = Math.round(prices6.reduce((a, b) => a + b) / prices6.length);
                const avg12 = Math.round(prices12.reduce((a, b) => a + b) / prices12.length);
                const diff = avg12 - avg6;
                const diffPercent = Math.round((diff / avg6) * 100);

                console.log(`\nüí∞ –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã:`);
                console.log(`   6 –º–µ—Å—è—Ü–µ–≤:  ${avg6}‚Ç¥`);
                console.log(`   12 –º–µ—Å—è—Ü–µ–≤: ${avg12}‚Ç¥`);
                console.log(`   –†–∞–∑–Ω–∏—Ü–∞:    ${diff}‚Ç¥ (${diffPercent > 0 ? '+' : ''}${diffPercent}%)`);

                results.analysis = {
                    avgPrice6: avg6,
                    avgPrice12: avg12,
                    difference: diff,
                    differencePercent: diffPercent
                };
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –æ–±–æ–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö');
        }

        return results;
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }
}

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
async function quickTest(plateNumber, months = 6) {
    const extractor = new FinalPeriodExtractor();
    
    try {
        await extractor.init(false); // –í–∏–¥–∏–º—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∞
        const result = await extractor.extractDataForPeriod(plateNumber, months);
        
        console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê:');
        console.log(JSON.stringify(result, null, 2));
        
        return result;
    } finally {
        await extractor.close();
    }
}

// –ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
async function fullComparison(plateNumber) {
    const extractor = new FinalPeriodExtractor();
    
    try {
        await extractor.init(true); // –°–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        const result = await extractor.comparePeriods(plateNumber);
        
        console.log('\nüéØ –ü–û–õ–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:');
        console.log(JSON.stringify(result, null, 2));
        
        return result;
    } finally {
        await extractor.close();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
if (require.main === module) {
    const args = process.argv.slice(2);
    
    if (args.includes('--quick')) {
        const plateNumber = args[args.indexOf('--quick') + 1] || 'AA1111AA';
        const months = parseInt(args[args.indexOf('--months') + 1]) || 6;
        
        quickTest(plateNumber, months)
            .then(() => process.exit(0))
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
                process.exit(1);
            });
    } else if (args.includes('--compare')) {
        const plateNumber = args[args.indexOf('--compare') + 1] || 'AA1111AA';
        
        fullComparison(plateNumber)
            .then(() => process.exit(0))
            .catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error);
                process.exit(1);
            });
    } else {
        console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–ï–†–ò–û–î-–≠–ö–°–¢–†–ê–ö–¢–û–†');
        console.log('');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
        console.log('  node final-period-extractor.js --quick AA1111AA --months 6');
        console.log('  node final-period-extractor.js --compare AA1111AA');
    }
}

module.exports = { FinalPeriodExtractor, quickTest, fullComparison };
